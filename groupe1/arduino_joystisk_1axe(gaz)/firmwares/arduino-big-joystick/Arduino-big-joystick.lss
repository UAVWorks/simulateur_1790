
Arduino-big-joystick.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  00000f06  00000f9a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f06  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000094  0080010e  0080010e  00000fa8  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  00000fa8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000260  00000000  00000000  00000fb9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000403f  00000000  00000000  00001219  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001000  00000000  00000000  00005258  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001aec  00000000  00000000  00006258  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000794  00000000  00000000  00007d44  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00001959  00000000  00000000  000084d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000299b  00000000  00000000  00009e31  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000002f0  00000000  00000000  0000c7cc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	89 c0       	rjmp	.+274    	; 0x114 <__ctors_end>
   2:	00 00       	nop
   4:	a2 c0       	rjmp	.+324    	; 0x14a <__bad_interrupt>
   6:	00 00       	nop
   8:	a0 c0       	rjmp	.+320    	; 0x14a <__bad_interrupt>
   a:	00 00       	nop
   c:	9e c0       	rjmp	.+316    	; 0x14a <__bad_interrupt>
   e:	00 00       	nop
  10:	9c c0       	rjmp	.+312    	; 0x14a <__bad_interrupt>
  12:	00 00       	nop
  14:	9a c0       	rjmp	.+308    	; 0x14a <__bad_interrupt>
  16:	00 00       	nop
  18:	98 c0       	rjmp	.+304    	; 0x14a <__bad_interrupt>
  1a:	00 00       	nop
  1c:	96 c0       	rjmp	.+300    	; 0x14a <__bad_interrupt>
  1e:	00 00       	nop
  20:	94 c0       	rjmp	.+296    	; 0x14a <__bad_interrupt>
  22:	00 00       	nop
  24:	92 c0       	rjmp	.+292    	; 0x14a <__bad_interrupt>
  26:	00 00       	nop
  28:	90 c0       	rjmp	.+288    	; 0x14a <__bad_interrupt>
  2a:	00 00       	nop
  2c:	c1 c3       	rjmp	.+1922   	; 0x7b0 <__vector_11>
  2e:	00 00       	nop
  30:	8c c0       	rjmp	.+280    	; 0x14a <__bad_interrupt>
  32:	00 00       	nop
  34:	8a c0       	rjmp	.+276    	; 0x14a <__bad_interrupt>
  36:	00 00       	nop
  38:	88 c0       	rjmp	.+272    	; 0x14a <__bad_interrupt>
  3a:	00 00       	nop
  3c:	86 c0       	rjmp	.+268    	; 0x14a <__bad_interrupt>
  3e:	00 00       	nop
  40:	84 c0       	rjmp	.+264    	; 0x14a <__bad_interrupt>
  42:	00 00       	nop
  44:	82 c0       	rjmp	.+260    	; 0x14a <__bad_interrupt>
  46:	00 00       	nop
  48:	80 c0       	rjmp	.+256    	; 0x14a <__bad_interrupt>
  4a:	00 00       	nop
  4c:	7e c0       	rjmp	.+252    	; 0x14a <__bad_interrupt>
  4e:	00 00       	nop
  50:	7c c0       	rjmp	.+248    	; 0x14a <__bad_interrupt>
  52:	00 00       	nop
  54:	7a c0       	rjmp	.+244    	; 0x14a <__bad_interrupt>
  56:	00 00       	nop
  58:	78 c0       	rjmp	.+240    	; 0x14a <__bad_interrupt>
  5a:	00 00       	nop
  5c:	40 c1       	rjmp	.+640    	; 0x2de <__vector_23>
  5e:	00 00       	nop
  60:	74 c0       	rjmp	.+232    	; 0x14a <__bad_interrupt>
  62:	00 00       	nop
  64:	72 c0       	rjmp	.+228    	; 0x14a <__bad_interrupt>
  66:	00 00       	nop
  68:	70 c0       	rjmp	.+224    	; 0x14a <__bad_interrupt>
  6a:	00 00       	nop
  6c:	6e c0       	rjmp	.+220    	; 0x14a <__bad_interrupt>
  6e:	00 00       	nop
  70:	6c c0       	rjmp	.+216    	; 0x14a <__bad_interrupt>
  72:	00 00       	nop
  74:	97 04       	cpc	r9, r7
  76:	b5 04       	cpc	r11, r5
  78:	5e 05       	cpc	r21, r14
  7a:	b5 04       	cpc	r11, r5
  7c:	5e 05       	cpc	r21, r14
  7e:	ea 04       	cpc	r14, r10
  80:	07 05       	cpc	r16, r7
  82:	5e 05       	cpc	r21, r14
  84:	26 05       	cpc	r18, r6
  86:	38 05       	cpc	r19, r8

00000088 <ProductString>:
  88:	22 03 4a 00 6f 00 79 00 73 00 74 00 69 00 63 00     ".J.o.y.s.t.i.c.
  98:	6b 00 2d 00 73 00 69 00 6d 00 75 00 6c 00 61 00     k.-.s.i.m.u.l.a.
  a8:	74 00 65 00 75 00 72 00 00 00                       t.e.u.r...

000000b2 <ManufacturerString>:
  b2:	10 03 41 00 72 00 64 00 75 00 69 00 6e 00 6f 00     ..A.r.d.u.i.n.o.
  c2:	00 00                                               ..

000000c4 <LanguageString>:
  c4:	04 03 09 04                                         ....

000000c8 <ConfigurationDescriptor>:
  c8:	09 02 22 00 01 01 00 c0 32 09 04 00 00 01 03 00     ..".....2.......
  d8:	00 00 09 21 11 01 00 01 22 17 00 07 05 81 03 08     ...!....".......
  e8:	00 0a                                               ..

000000ea <DeviceDescriptor>:
  ea:	12 01 10 01 00 00 00 08 eb 03 43 20 00 00 01 02     ..........C ....
  fa:	00 01                                               ..

000000fc <JoystickReport>:
  fc:	05 01 09 04 a1 00 05 01 09 30 16 00 80 26 ff 7f     .........0...&..
 10c:	75 10 95 01 81 82 c0 00                             u.......

00000114 <__ctors_end>:
 114:	11 24       	eor	r1, r1
 116:	1f be       	out	0x3f, r1	; 63
 118:	cf ef       	ldi	r28, 0xFF	; 255
 11a:	d2 e0       	ldi	r29, 0x02	; 2
 11c:	de bf       	out	0x3e, r29	; 62
 11e:	cd bf       	out	0x3d, r28	; 61

00000120 <__do_copy_data>:
 120:	11 e0       	ldi	r17, 0x01	; 1
 122:	a0 e0       	ldi	r26, 0x00	; 0
 124:	b1 e0       	ldi	r27, 0x01	; 1
 126:	e6 e0       	ldi	r30, 0x06	; 6
 128:	ff e0       	ldi	r31, 0x0F	; 15
 12a:	02 c0       	rjmp	.+4      	; 0x130 <__do_copy_data+0x10>
 12c:	05 90       	lpm	r0, Z+
 12e:	0d 92       	st	X+, r0
 130:	ae 30       	cpi	r26, 0x0E	; 14
 132:	b1 07       	cpc	r27, r17
 134:	d9 f7       	brne	.-10     	; 0x12c <__do_copy_data+0xc>

00000136 <__do_clear_bss>:
 136:	21 e0       	ldi	r18, 0x01	; 1
 138:	ae e0       	ldi	r26, 0x0E	; 14
 13a:	b1 e0       	ldi	r27, 0x01	; 1
 13c:	01 c0       	rjmp	.+2      	; 0x140 <.do_clear_bss_start>

0000013e <.do_clear_bss_loop>:
 13e:	1d 92       	st	X+, r1

00000140 <.do_clear_bss_start>:
 140:	a2 3a       	cpi	r26, 0xA2	; 162
 142:	b2 07       	cpc	r27, r18
 144:	e1 f7       	brne	.-8      	; 0x13e <.do_clear_bss_loop>
 146:	2d d0       	rcall	.+90     	; 0x1a2 <main>
 148:	dc c6       	rjmp	.+3512   	; 0xf02 <_exit>

0000014a <__bad_interrupt>:
 14a:	5a cf       	rjmp	.-332    	; 0x0 <__vectors>

0000014c <SetupHardware>:
    }
}

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
 14c:	cf 93       	push	r28
 14e:	df 93       	push	r29
    /* Disable watchdog if enabled by bootloader/fuses */
    MCUSR &= ~(1 << WDRF);
 150:	84 b7       	in	r24, 0x34	; 52
 152:	87 7f       	andi	r24, 0xF7	; 247
 154:	84 bf       	out	0x34, r24	; 52
    wdt_disable();
 156:	88 e1       	ldi	r24, 0x18	; 24
 158:	0f b6       	in	r0, 0x3f	; 63
 15a:	f8 94       	cli
 15c:	80 93 60 00 	sts	0x0060, r24
 160:	10 92 60 00 	sts	0x0060, r1
 164:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate.
			 */
			static inline void Serial_Init(const uint32_t BaudRate,
			                               const bool DoubleSpeed)
			{
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
 166:	80 e1       	ldi	r24, 0x10	; 16
 168:	90 e0       	ldi	r25, 0x00	; 0
 16a:	90 93 cd 00 	sts	0x00CD, r25
 16e:	80 93 cc 00 	sts	0x00CC, r24

				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
 172:	86 e0       	ldi	r24, 0x06	; 6
 174:	80 93 ca 00 	sts	0x00CA, r24
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
 178:	82 e0       	ldi	r24, 0x02	; 2
 17a:	80 93 c8 00 	sts	0x00C8, r24
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
 17e:	c9 ec       	ldi	r28, 0xC9	; 201
 180:	d0 e0       	ldi	r29, 0x00	; 0
 182:	88 e1       	ldi	r24, 0x18	; 24
 184:	88 83       	st	Y, r24
				
				DDRD  |= (1 << 3);
 186:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
 188:	5a 9a       	sbi	0x0b, 2	; 11

		/* Inline Functions: */
		#if !defined(__DOXYGEN__)
			static inline void LEDs_Init(void)
			{
				DDRD  |= LEDS_ALL_LEDS;
 18a:	8a b1       	in	r24, 0x0a	; 10
 18c:	80 63       	ori	r24, 0x30	; 48
 18e:	8a b9       	out	0x0a, r24	; 10
				PORTD |= LEDS_ALL_LEDS;
 190:	8b b1       	in	r24, 0x0b	; 11
 192:	80 63       	ori	r24, 0x30	; 48
 194:	8b b9       	out	0x0b, r24	; 11

    /* Hardware Initialization */
    Serial_Init(115200, true);
    LEDs_Init();
    USB_Init();
 196:	01 d3       	rcall	.+1538   	; 0x79a <USB_Init>
 198:	88 e9       	ldi	r24, 0x98	; 152

    UCSR1B = ((1 << RXCIE1) | (1 << TXEN1) | (1 << RXEN1));
 19a:	88 83       	st	Y, r24
 19c:	df 91       	pop	r29
}
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <main>:
 1a2:	d4 df       	rcall	.-88     	; 0x14c <SetupHardware>
/** Main program entry point. This routine contains the overall program flow, including initial
 *  setup of all components and the main program loop.
 */
int main(void)
{
    SetupHardware();
 1a4:	2f b7       	in	r18, 0x3f	; 63
		 *
		 *  \param[out] Buffer  Pointer to a ring buffer structure to initialize
		 */
		static inline void RingBuffer_InitBuffer(RingBuff_t* const Buffer)
		{
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 1a6:	f8 94       	cli
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 1a8:	84 e1       	ldi	r24, 0x14	; 20
			{
				Buffer->In  = Buffer->Buffer;
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	90 93 93 01 	sts	0x0193, r25
 1b0:	80 93 92 01 	sts	0x0192, r24
 1b4:	90 93 95 01 	sts	0x0195, r25
				Buffer->Out = Buffer->Buffer;
 1b8:	80 93 94 01 	sts	0x0194, r24
 1bc:	2f bf       	out	0x3f, r18	; 63
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 1be:	78 94       	sei

    RingBuffer_InitBuffer(&USARTtoUSB_Buffer);

    sei();
 1c0:	80 e0       	ldi	r24, 0x00	; 0

    for (;;) {
	HID_Device_USBTask(&Joystick_HID_Interface);
 1c2:	91 e0       	ldi	r25, 0x01	; 1
 1c4:	d2 d5       	rcall	.+2980   	; 0xd6a <HID_Device_USBTask>
 1c6:	83 d4       	rcall	.+2310   	; 0xace <USB_USBTask>
 1c8:	80 91 0e 01 	lds	r24, 0x010E
	USB_USBTask();
 1cc:	90 91 0f 01 	lds	r25, 0x010F

	/* Turn off the Tx LED when the tick count reaches zero */
	if (led1_ticks) {
 1d0:	89 2b       	or	r24, r25
 1d2:	b1 f3       	breq	.-20     	; 0x1c0 <main+0x1e>
 1d4:	80 91 0e 01 	lds	r24, 0x010E
 1d8:	90 91 0f 01 	lds	r25, 0x010F
	    led1_ticks--;
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	90 93 0f 01 	sts	0x010F, r25
 1e2:	80 93 0e 01 	sts	0x010E, r24
 1e6:	80 91 0e 01 	lds	r24, 0x010E
 1ea:	90 91 0f 01 	lds	r25, 0x010F
	    if (led1_ticks == 0) {
 1ee:	89 2b       	or	r24, r25
 1f0:	39 f7       	brne	.-50     	; 0x1c0 <main+0x1e>
 1f2:	5d 9a       	sbi	0x0b, 5	; 11
 1f4:	e5 cf       	rjmp	.-54     	; 0x1c0 <main+0x1e>

000001f6 <EVENT_USB_Device_Connect>:
 1f6:	08 95       	ret

000001f8 <EVENT_USB_Device_Disconnect>:
				PORTD &= ~LEDMask;
			}

			static inline void LEDs_TurnOffLEDs(const uint8_t LEDMask)
			{
				PORTD |= LEDMask;
 1f8:	08 95       	ret

000001fa <EVENT_USB_Device_ConfigurationChanged>:
 1fa:	80 e0       	ldi	r24, 0x00	; 0
}

/** Event handler for the library USB Configuration Changed event. */
void EVENT_USB_Device_ConfigurationChanged(void)
{
    HID_Device_ConfigureEndpoints(&Joystick_HID_Interface);
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	92 d5       	rcall	.+2852   	; 0xd24 <HID_Device_ConfigureEndpoints>
 200:	e2 ee       	ldi	r30, 0xE2	; 226
			 *  at the start of each USB frame when enumerated in device mode.
			 */
			static inline void USB_Device_EnableSOFEvents(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_EnableSOFEvents(void)
			{
				USB_INT_Enable(USB_INT_SOFI);
 202:	f0 e0       	ldi	r31, 0x00	; 0
 204:	80 81       	ld	r24, Z
 206:	84 60       	ori	r24, 0x04	; 4
 208:	80 83       	st	Z, r24
 20a:	08 95       	ret

0000020c <EVENT_USB_Device_UnhandledControlRequest>:
 20c:	80 e0       	ldi	r24, 0x00	; 0
}

/** Event handler for the library USB Unhandled Control Request event. */
void EVENT_USB_Device_UnhandledControlRequest(void)
{
    HID_Device_ProcessControlRequest(&Joystick_HID_Interface);
 20e:	91 e0       	ldi	r25, 0x01	; 1
 210:	6f c4       	rjmp	.+2270   	; 0xaf0 <HID_Device_ProcessControlRequest>

00000212 <EVENT_USB_Device_StartOfFrame>:
 212:	80 91 0b 01 	lds	r24, 0x010B
			 *  \param[in,out] HIDInterfaceInfo  Pointer to a structure containing a HID Class configuration and state.
			 */
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo) ATTR_ALWAYS_INLINE ATTR_NON_NULL_PTR_ARG(1);
			static inline void HID_Device_MillisecondElapsed(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
			{
				if (HIDInterfaceInfo->State.IdleMSRemaining)
 216:	90 91 0c 01 	lds	r25, 0x010C
 21a:	00 97       	sbiw	r24, 0x00	; 0
 21c:	29 f0       	breq	.+10     	; 0x228 <EVENT_USB_Device_StartOfFrame+0x16>
				  HIDInterfaceInfo->State.IdleMSRemaining--;
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	90 93 0c 01 	sts	0x010C, r25
 224:	80 93 0b 01 	sts	0x010B, r24
 228:	08 95       	ret

0000022a <CALLBACK_HID_Device_CreateHIDReport>:
    USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
    uint8_t* const ReportID,
    const uint8_t ReportType,
    void* ReportData,
    uint16_t* const ReportSize)
{
 22a:	0f 93       	push	r16
 22c:	1f 93       	push	r17
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 22e:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 230:	f8 94       	cli
			{
				Count = Buffer->Count;
 232:	80 91 96 01 	lds	r24, 0x0196
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 236:	9f bf       	out	0x3f, r25	; 63
    RingBuff_Count_t BufferCount = RingBuffer_GetCount(&USARTtoUSB_Buffer);

    /* If there's a new report from the Arduino, copy it in and send that.
     * If not then the last report is sent again.
     */
    if (BufferCount >= sizeof(joyReport)) {
 238:	82 30       	cpi	r24, 0x02	; 2
 23a:	08 f4       	brcc	.+2      	; 0x23e <CALLBACK_HID_Device_CreateHIDReport+0x14>
 23c:	3f c0       	rjmp	.+126    	; 0x2bc <CALLBACK_HID_Device_CreateHIDReport+0x92>
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
 23e:	e0 91 94 01 	lds	r30, 0x0194
 242:	f0 91 95 01 	lds	r31, 0x0195
 246:	41 91       	ld	r20, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 248:	f0 93 95 01 	sts	0x0195, r31
 24c:	e0 93 94 01 	sts	0x0194, r30
 250:	e2 59       	subi	r30, 0x92	; 146
 252:	f1 40       	sbci	r31, 0x01	; 1
 254:	31 f4       	brne	.+12     	; 0x262 <CALLBACK_HID_Device_CreateHIDReport+0x38>
			  Buffer->Out = Buffer->Buffer;
 256:	84 e1       	ldi	r24, 0x14	; 20
 258:	91 e0       	ldi	r25, 0x01	; 1
 25a:	90 93 95 01 	sts	0x0195, r25
 25e:	80 93 94 01 	sts	0x0194, r24

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 262:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 264:	f8 94       	cli
			{
				Buffer->Count--;
 266:	80 91 96 01 	lds	r24, 0x0196
 26a:	81 50       	subi	r24, 0x01	; 1
 26c:	80 93 96 01 	sts	0x0196, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 270:	9f bf       	out	0x3f, r25	; 63
	uint8_t ind;
	for (ind=0; ind<sizeof(joyReport); ind++) {
	    ((uint8_t *)&joyReport)[ind] = RingBuffer_Remove(&USARTtoUSB_Buffer);
 272:	40 93 10 01 	sts	0x0110, r20
		 *
		 *  \return Next data element stored in the buffer
		 */
		static inline RingBuff_Data_t RingBuffer_Remove(RingBuff_t* const Buffer)
		{
			RingBuff_Data_t Data = *Buffer->Out;
 276:	e0 91 94 01 	lds	r30, 0x0194
 27a:	f0 91 95 01 	lds	r31, 0x0195
 27e:	41 91       	ld	r20, Z+
			
			if (++Buffer->Out == &Buffer->Buffer[BUFFER_SIZE])
 280:	f0 93 95 01 	sts	0x0195, r31
 284:	e0 93 94 01 	sts	0x0194, r30
 288:	e2 59       	subi	r30, 0x92	; 146
 28a:	f1 40       	sbci	r31, 0x01	; 1
 28c:	31 f4       	brne	.+12     	; 0x29a <CALLBACK_HID_Device_CreateHIDReport+0x70>
			  Buffer->Out = Buffer->Buffer;
 28e:	84 e1       	ldi	r24, 0x14	; 20
 290:	91 e0       	ldi	r25, 0x01	; 1
 292:	90 93 95 01 	sts	0x0195, r25
 296:	80 93 94 01 	sts	0x0194, r24

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 29a:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 29c:	f8 94       	cli
			{
				Buffer->Count--;
 29e:	80 91 96 01 	lds	r24, 0x0196
 2a2:	81 50       	subi	r24, 0x01	; 1
 2a4:	80 93 96 01 	sts	0x0196, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 2a8:	9f bf       	out	0x3f, r25	; 63
 2aa:	40 93 11 01 	sts	0x0111, r20
				PORTD |= LEDS_ALL_LEDS;
			}
			
			static inline void LEDs_TurnOnLEDs(const uint8_t LEDMask)
			{
				PORTD &= ~LEDMask;
 2ae:	5d 98       	cbi	0x0b, 5	; 11
	}

	LEDs_TurnOnLEDs(LEDS_LED1);
	led1_ticks = LED_ON_TICKS;
 2b0:	80 ed       	ldi	r24, 0xD0	; 208
 2b2:	97 e0       	ldi	r25, 0x07	; 7
 2b4:	90 93 0f 01 	sts	0x010F, r25
 2b8:	80 93 0e 01 	sts	0x010E, r24
    }

    *reportp = joyReport;
 2bc:	80 91 10 01 	lds	r24, 0x0110
 2c0:	90 91 11 01 	lds	r25, 0x0111
 2c4:	f9 01       	movw	r30, r18
 2c6:	91 83       	std	Z+1, r25	; 0x01
 2c8:	80 83       	st	Z, r24

    *ReportSize = sizeof(joyReport);
 2ca:	82 e0       	ldi	r24, 0x02	; 2
 2cc:	90 e0       	ldi	r25, 0x00	; 0
 2ce:	f8 01       	movw	r30, r16
 2d0:	91 83       	std	Z+1, r25	; 0x01
 2d2:	80 83       	st	Z, r24
    return false;
}
 2d4:	80 e0       	ldi	r24, 0x00	; 0
 2d6:	1f 91       	pop	r17
 2d8:	0f 91       	pop	r16
 2da:	08 95       	ret

000002dc <CALLBACK_HID_Device_ProcessHIDReport>:
void CALLBACK_HID_Device_ProcessHIDReport(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo,
                                          const uint8_t ReportID,
                                          const uint8_t ReportType,
                                          const void* ReportData,
                                          const uint16_t ReportSize)
{
 2dc:	08 95       	ret

000002de <__vector_23>:

/** ISR to manage the reception of data from the serial port, placing received bytes into a circular buffer
 *  for later transmission to the host.
 */
ISR(USART1_RX_vect, ISR_BLOCK)
{
 2de:	1f 92       	push	r1
 2e0:	0f 92       	push	r0
 2e2:	0f b6       	in	r0, 0x3f	; 63
 2e4:	0f 92       	push	r0
 2e6:	11 24       	eor	r1, r1
 2e8:	2f 93       	push	r18
 2ea:	8f 93       	push	r24
 2ec:	9f 93       	push	r25
 2ee:	ef 93       	push	r30
 2f0:	ff 93       	push	r31
    uint8_t ReceivedByte = UDR1;
 2f2:	80 91 ce 00 	lds	r24, 0x00CE

    if ((USB_DeviceState == DEVICE_STATE_Configured) &&
 2f6:	9e b3       	in	r25, 0x1e	; 30
 2f8:	94 30       	cpi	r25, 0x04	; 4
 2fa:	29 f5       	brne	.+74     	; 0x346 <__stack+0x47>
		 */
		static inline RingBuff_Count_t RingBuffer_GetCount(RingBuff_t* const Buffer)
		{
			RingBuff_Count_t Count;
			
			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 2fc:	2f b7       	in	r18, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 2fe:	f8 94       	cli
			{
				Count = Buffer->Count;
 300:	90 91 96 01 	lds	r25, 0x0196
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 304:	2f bf       	out	0x3f, r18	; 63
 306:	9e 37       	cpi	r25, 0x7E	; 126
 308:	f1 f0       	breq	.+60     	; 0x346 <__stack+0x47>
		 *  \param[in]     Data    Data element to insert into the buffer
		 */
		static inline void RingBuffer_Insert(RingBuff_t* const Buffer,
		                                     const RingBuff_Data_t Data)
		{
			*Buffer->In = Data;
 30a:	e0 91 92 01 	lds	r30, 0x0192
 30e:	f0 91 93 01 	lds	r31, 0x0193
 312:	80 83       	st	Z, r24
			
			if (++Buffer->In == &Buffer->Buffer[BUFFER_SIZE])
 314:	e0 91 92 01 	lds	r30, 0x0192
 318:	f0 91 93 01 	lds	r31, 0x0193
 31c:	cf 01       	movw	r24, r30
 31e:	01 96       	adiw	r24, 0x01	; 1
 320:	90 93 93 01 	sts	0x0193, r25
 324:	80 93 92 01 	sts	0x0192, r24
 328:	82 59       	subi	r24, 0x92	; 146
 32a:	91 40       	sbci	r25, 0x01	; 1
 32c:	21 f4       	brne	.+8      	; 0x336 <__stack+0x37>
			  Buffer->In = Buffer->Buffer;
 32e:	84 e1       	ldi	r24, 0x14	; 20
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	92 83       	std	Z+2, r25	; 0x02
 334:	81 83       	std	Z+1, r24	; 0x01

			ATOMIC_BLOCK(ATOMIC_RESTORESTATE)
 336:	9f b7       	in	r25, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 338:	f8 94       	cli
			{
				Buffer->Count++;
 33a:	80 91 96 01 	lds	r24, 0x0196
 33e:	8f 5f       	subi	r24, 0xFF	; 255
 340:	80 93 96 01 	sts	0x0196, r24
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 344:	9f bf       	out	0x3f, r25	; 63
	    !RingBuffer_IsFull(&USARTtoUSB_Buffer)) {
	RingBuffer_Insert(&USARTtoUSB_Buffer, ReceivedByte);
    }
}
 346:	ff 91       	pop	r31
 348:	ef 91       	pop	r30
 34a:	9f 91       	pop	r25
 34c:	8f 91       	pop	r24
 34e:	2f 91       	pop	r18
 350:	0f 90       	pop	r0
 352:	0f be       	out	0x3f, r0	; 63
 354:	0f 90       	pop	r0
 356:	1f 90       	pop	r1
 358:	18 95       	reti

0000035a <CALLBACK_USB_GetDescriptor>:
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
 35a:	29 2f       	mov	r18, r25
 35c:	33 27       	eor	r19, r19
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 35e:	23 30       	cpi	r18, 0x03	; 3
 360:	31 05       	cpc	r19, r1
 362:	b9 f0       	breq	.+46     	; 0x392 <CALLBACK_USB_GetDescriptor+0x38>
 364:	5c f4       	brge	.+22     	; 0x37c <CALLBACK_USB_GetDescriptor+0x22>
 366:	21 30       	cpi	r18, 0x01	; 1
 368:	31 05       	cpc	r19, r1
 36a:	69 f1       	breq	.+90     	; 0x3c6 <CALLBACK_USB_GetDescriptor+0x6c>
 36c:	22 30       	cpi	r18, 0x02	; 2
 36e:	31 05       	cpc	r19, r1
 370:	79 f5       	brne	.+94     	; 0x3d0 <CALLBACK_USB_GetDescriptor+0x76>
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
 372:	82 e2       	ldi	r24, 0x22	; 34
 374:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
 376:	28 ec       	ldi	r18, 0xC8	; 200
 378:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
 37a:	2e c0       	rjmp	.+92     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x7e>
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
 37c:	21 32       	cpi	r18, 0x21	; 33
 37e:	31 05       	cpc	r19, r1
 380:	e9 f0       	breq	.+58     	; 0x3bc <CALLBACK_USB_GetDescriptor+0x62>
 382:	22 32       	cpi	r18, 0x22	; 34
 384:	31 05       	cpc	r19, r1
 386:	21 f5       	brne	.+72     	; 0x3d0 <CALLBACK_USB_GetDescriptor+0x76>
			Address = (void*)&ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_t);
			break;
		case DTYPE_Report: 
			Address = (void*)&JoystickReport;
			Size    = sizeof(JoystickReport);
 388:	87 e1       	ldi	r24, 0x17	; 23
 38a:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_t);
			break;
		case DTYPE_Report: 
			Address = (void*)&JoystickReport;
 38c:	2c ef       	ldi	r18, 0xFC	; 252
 38e:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(JoystickReport);
			break;
 390:	23 c0       	rjmp	.+70     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x7e>
 392:	99 27       	eor	r25, r25
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String: 
			switch (DescriptorNumber)
 394:	81 30       	cpi	r24, 0x01	; 1
 396:	91 05       	cpc	r25, r1
 398:	41 f0       	breq	.+16     	; 0x3aa <CALLBACK_USB_GetDescriptor+0x50>
 39a:	82 30       	cpi	r24, 0x02	; 2
 39c:	91 05       	cpc	r25, r1
 39e:	41 f0       	breq	.+16     	; 0x3b0 <CALLBACK_USB_GetDescriptor+0x56>
 3a0:	89 2b       	or	r24, r25
 3a2:	b1 f4       	brne	.+44     	; 0x3d0 <CALLBACK_USB_GetDescriptor+0x76>
			{
				case 0x00: 
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
 3a4:	e4 ec       	ldi	r30, 0xC4	; 196
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	05 c0       	rjmp	.+10     	; 0x3b4 <CALLBACK_USB_GetDescriptor+0x5a>
					break;
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
 3aa:	e2 eb       	ldi	r30, 0xB2	; 178
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	02 c0       	rjmp	.+4      	; 0x3b4 <CALLBACK_USB_GetDescriptor+0x5a>
					break;
				case 0x02: 
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
 3b0:	e8 e8       	ldi	r30, 0x88	; 136
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	84 91       	lpm	r24, Z
 3b6:	90 e0       	ldi	r25, 0x00	; 0
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
					break;
				case 0x02: 
					Address = (void*)&ProductString;
 3b8:	9f 01       	movw	r18, r30
					Size    = pgm_read_byte(&ProductString.Header.Size);
					break;
 3ba:	0e c0       	rjmp	.+28     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x7e>
			}
			
			break;
		case DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_JoystickHID;
			Size    = sizeof(USB_HID_Descriptor_t);
 3bc:	89 e0       	ldi	r24, 0x09	; 9
 3be:	90 e0       	ldi	r25, 0x00	; 0
					break;
			}
			
			break;
		case DTYPE_HID: 
			Address = (void*)&ConfigurationDescriptor.HID_JoystickHID;
 3c0:	2a ed       	ldi	r18, 0xDA	; 218
 3c2:	30 e0       	ldi	r19, 0x00	; 0
			Size    = sizeof(USB_HID_Descriptor_t);
			break;
 3c4:	09 c0       	rjmp	.+18     	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x7e>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
 3c6:	82 e1       	ldi	r24, 0x12	; 18
 3c8:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = (void*)&DeviceDescriptor;
 3ca:	2a ee       	ldi	r18, 0xEA	; 234
 3cc:	30 e0       	ldi	r19, 0x00	; 0
 3ce:	04 c0       	rjmp	.+8      	; 0x3d8 <CALLBACK_USB_GetDescriptor+0x7e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	90 e0       	ldi	r25, 0x00	; 0
                                    void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
 3d4:	20 e0       	ldi	r18, 0x00	; 0
 3d6:	30 e0       	ldi	r19, 0x00	; 0
			Address = (void*)&JoystickReport;
			Size    = sizeof(JoystickReport);
			break;
	}
	
	*DescriptorAddress = Address;
 3d8:	fa 01       	movw	r30, r20
 3da:	31 83       	std	Z+1, r19	; 0x01
 3dc:	20 83       	st	Z, r18
	return Size;
}
 3de:	08 95       	ret

000003e0 <Endpoint_BytesToEPSizeMaskDynamic>:
		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
				uint16_t CheckBytes = 8;
 3e0:	28 e0       	ldi	r18, 0x08	; 8
 3e2:	30 e0       	ldi	r19, 0x00	; 0

		/* Inline Functions: */
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes) ATTR_WARN_UNUSED_RESULT ATTR_CONST ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_BytesToEPSizeMask(const uint16_t Bytes)
			{
				uint8_t  MaskVal    = 0;
 3e4:	40 e0       	ldi	r20, 0x00	; 0
				uint16_t CheckBytes = 8;
				
				while (CheckBytes < Bytes)
 3e6:	28 17       	cp	r18, r24
 3e8:	39 07       	cpc	r19, r25
 3ea:	20 f4       	brcc	.+8      	; 0x3f4 <Endpoint_BytesToEPSizeMaskDynamic+0x14>
				{
					MaskVal++;
 3ec:	4f 5f       	subi	r20, 0xFF	; 255
					CheckBytes <<= 1;
 3ee:	22 0f       	add	r18, r18
 3f0:	33 1f       	adc	r19, r19
 3f2:	f9 cf       	rjmp	.-14     	; 0x3e6 <Endpoint_BytesToEPSizeMaskDynamic+0x6>
#endif

uint8_t Endpoint_BytesToEPSizeMaskDynamic(const uint16_t Size)
{
	return Endpoint_BytesToEPSizeMask(Size);
}
 3f4:	84 2f       	mov	r24, r20
 3f6:	82 95       	swap	r24
 3f8:	80 7f       	andi	r24, 0xF0	; 240
 3fa:	08 95       	ret

000003fc <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 3fc:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
 400:	eb ee       	ldi	r30, 0xEB	; 235
 402:	f0 e0       	ldi	r31, 0x00	; 0
 404:	80 81       	ld	r24, Z
 406:	81 60       	ori	r24, 0x01	; 1
 408:	80 83       	st	Z, r24
                                    const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
 40a:	ed ee       	ldi	r30, 0xED	; 237
 40c:	f0 e0       	ldi	r31, 0x00	; 0
 40e:	10 82       	st	Z, r1

	UECFG0X = UECFG0XData;
 410:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
 414:	40 83       	st	Z, r20
			 *  \return Boolean true if the currently selected endpoint has been configured, false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
 416:	80 91 ee 00 	lds	r24, 0x00EE

	return Endpoint_IsConfigured();
}
 41a:	88 1f       	adc	r24, r24
 41c:	88 27       	eor	r24, r24
 41e:	88 1f       	adc	r24, r24
 420:	08 95       	ret

00000422 <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;
 422:	10 92 f4 00 	sts	0x00F4, r1

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 426:	80 e0       	ldi	r24, 0x00	; 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 428:	80 93 e9 00 	sts	0x00E9, r24
	{
		Endpoint_SelectEndpoint(EPNum);	
		UEIENX  = 0;
 42c:	10 92 f0 00 	sts	0x00F0, r1
		UEINTX  = 0;
 430:	10 92 e8 00 	sts	0x00E8, r1
		UECFG1X = 0;
 434:	10 92 ed 00 	sts	0x00ED, r1
			 *  to and from a host.
			 */
			static inline void Endpoint_DisableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_DisableEndpoint(void)
			{
				UECONX &= ~(1 << EPEN);
 438:	90 91 eb 00 	lds	r25, 0x00EB
 43c:	9e 7f       	andi	r25, 0xFE	; 254
 43e:	90 93 eb 00 	sts	0x00EB, r25

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
 442:	8f 5f       	subi	r24, 0xFF	; 255
 444:	85 30       	cpi	r24, 0x05	; 5
 446:	81 f7       	brne	.-32     	; 0x428 <Endpoint_ClearEndpoints+0x6>
		UEIENX  = 0;
		UEINTX  = 0;
		UECFG1X = 0;
		Endpoint_DisableEndpoint();
	}
}
 448:	08 95       	ret

0000044a <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
 44a:	80 91 9a 01 	lds	r24, 0x019A
 44e:	87 fd       	sbrc	r24, 7
 450:	05 c0       	rjmp	.+10     	; 0x45c <Endpoint_ClearStatusStage+0x12>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 452:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
 456:	80 ff       	sbrs	r24, 0
 458:	0d c0       	rjmp	.+26     	; 0x474 <Endpoint_ClearStatusStage+0x2a>
 45a:	10 c0       	rjmp	.+32     	; 0x47c <Endpoint_ClearStatusStage+0x32>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 45c:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
 460:	82 fd       	sbrc	r24, 2
 462:	04 c0       	rjmp	.+8      	; 0x46c <Endpoint_ClearStatusStage+0x22>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 464:	8e b3       	in	r24, 0x1e	; 30
 466:	81 11       	cpse	r24, r1
 468:	f9 cf       	rjmp	.-14     	; 0x45c <Endpoint_ClearStatusStage+0x12>
 46a:	08 95       	ret
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 46c:	80 91 e8 00 	lds	r24, 0x00E8
 470:	8b 77       	andi	r24, 0x7B	; 123
 472:	07 c0       	rjmp	.+14     	; 0x482 <Endpoint_ClearStatusStage+0x38>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
 474:	8e b3       	in	r24, 0x1e	; 30
 476:	81 11       	cpse	r24, r1
 478:	ec cf       	rjmp	.-40     	; 0x452 <Endpoint_ClearStatusStage+0x8>
 47a:	08 95       	ret
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 47c:	80 91 e8 00 	lds	r24, 0x00E8
 480:	8e 77       	andi	r24, 0x7E	; 126
 482:	80 93 e8 00 	sts	0x00E8, r24
 486:	08 95       	ret

00000488 <Endpoint_WaitUntilReady>:
	}
}

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
 488:	85 e6       	ldi	r24, 0x65	; 101
			 *  \return The currently selected endpoint's direction, as a ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & ENDPOINT_DIR_IN);
 48a:	90 91 ec 00 	lds	r25, 0x00EC
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
 48e:	90 ff       	sbrs	r25, 0
 490:	05 c0       	rjmp	.+10     	; 0x49c <Endpoint_WaitUntilReady+0x14>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 492:	90 91 e8 00 	lds	r25, 0x00E8
		{
			if (Endpoint_IsINReady())
 496:	90 ff       	sbrs	r25, 0
 498:	05 c0       	rjmp	.+10     	; 0x4a4 <Endpoint_WaitUntilReady+0x1c>
 49a:	1b c0       	rjmp	.+54     	; 0x4d2 <Endpoint_WaitUntilReady+0x4a>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 49c:	90 91 e8 00 	lds	r25, 0x00E8
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
 4a0:	92 fd       	sbrc	r25, 2
 4a2:	17 c0       	rjmp	.+46     	; 0x4d2 <Endpoint_WaitUntilReady+0x4a>
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 4a4:	9e b3       	in	r25, 0x1e	; 30
 4a6:	99 23       	and	r25, r25
 4a8:	b1 f0       	breq	.+44     	; 0x4d6 <Endpoint_WaitUntilReady+0x4e>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 4aa:	9e b3       	in	r25, 0x1e	; 30
 4ac:	95 30       	cpi	r25, 0x05	; 5
 4ae:	a9 f0       	breq	.+42     	; 0x4da <Endpoint_WaitUntilReady+0x52>
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 4b0:	90 91 eb 00 	lds	r25, 0x00EB
		  return ENDPOINT_READYWAIT_BusSuspended;
		else if (Endpoint_IsStalled())
 4b4:	95 fd       	sbrc	r25, 5
 4b6:	13 c0       	rjmp	.+38     	; 0x4de <Endpoint_WaitUntilReady+0x56>
		  return ENDPOINT_READYWAIT_EndpointStalled;
			  
		if (USB_INT_HasOccurred(USB_INT_SOFI))
 4b8:	90 91 e1 00 	lds	r25, 0x00E1
 4bc:	92 ff       	sbrs	r25, 2
 4be:	e5 cf       	rjmp	.-54     	; 0x48a <Endpoint_WaitUntilReady+0x2>
		{
			USB_INT_Clear(USB_INT_SOFI);
 4c0:	90 91 e1 00 	lds	r25, 0x00E1
 4c4:	9b 7f       	andi	r25, 0xFB	; 251
 4c6:	90 93 e1 00 	sts	0x00E1, r25
 4ca:	81 50       	subi	r24, 0x01	; 1

			if (!(TimeoutMSRem--))
 4cc:	f1 f6       	brne	.-68     	; 0x48a <Endpoint_WaitUntilReady+0x2>
			  return ENDPOINT_READYWAIT_Timeout;
 4ce:	84 e0       	ldi	r24, 0x04	; 4
		}
	}
}
 4d0:	08 95       	ret
	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
		{
			if (Endpoint_IsINReady())
			  return ENDPOINT_READYWAIT_NoError;
 4d2:	80 e0       	ldi	r24, 0x00	; 0
 4d4:	08 95       	ret
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;
		}
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
 4d6:	82 e0       	ldi	r24, 0x02	; 2
 4d8:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_READYWAIT_BusSuspended;
 4da:	83 e0       	ldi	r24, 0x03	; 3
 4dc:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
 4de:	81 e0       	ldi	r24, 0x01	; 1
 4e0:	08 95       	ret

000004e2 <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer,
                            uint16_t Length
                            __CALLBACK_PARAM)
{
 4e2:	ef 92       	push	r14
 4e4:	ff 92       	push	r15
 4e6:	0f 93       	push	r16
 4e8:	1f 93       	push	r17
 4ea:	cf 93       	push	r28
 4ec:	df 93       	push	r29
 4ee:	ec 01       	movw	r28, r24
 4f0:	8b 01       	movw	r16, r22
 4f2:	7a 01       	movw	r14, r20
			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
 4f4:	c9 df       	rcall	.-110    	; 0x488 <Endpoint_WaitUntilReady>
 4f6:	81 11       	cpse	r24, r1
 4f8:	1d c0       	rjmp	.+58     	; 0x534 <Endpoint_Write_Stream_LE+0x52>
 4fa:	01 15       	cp	r16, r1
				} while (Length >= 8);	
		}
	}
	#endif

	while (Length)
 4fc:	11 05       	cpc	r17, r1
 4fe:	c9 f0       	breq	.+50     	; 0x532 <Endpoint_Write_Stream_LE+0x50>
 500:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 504:	85 fd       	sbrc	r24, 5
	{
		if (!(Endpoint_IsReadWriteAllowed()))
 506:	0e c0       	rjmp	.+28     	; 0x524 <Endpoint_Write_Stream_LE+0x42>
 508:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 50c:	8e 77       	andi	r24, 0x7E	; 126
 50e:	80 93 e8 00 	sts	0x00E8, r24
 512:	e1 14       	cp	r14, r1
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
 514:	f1 04       	cpc	r15, r1
 516:	71 f3       	breq	.-36     	; 0x4f4 <Endpoint_Write_Stream_LE+0x12>
 518:	f7 01       	movw	r30, r14
 51a:	09 95       	icall
 51c:	81 30       	cpi	r24, 0x01	; 1
 51e:	51 f7       	brne	.-44     	; 0x4f4 <Endpoint_Write_Stream_LE+0x12>
 520:	85 e0       	ldi	r24, 0x05	; 5
			  return ENDPOINT_RWSTREAM_CallbackAborted;
 522:	08 c0       	rjmp	.+16     	; 0x534 <Endpoint_Write_Stream_LE+0x52>
 524:	88 81       	ld	r24, Y
			if ((ErrorCode = Endpoint_WaitUntilReady()))
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 526:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 52a:	01 50       	subi	r16, 0x01	; 1
			Length--;
 52c:	11 09       	sbc	r17, r1
 52e:	21 96       	adiw	r28, 0x01	; 1
			if ((ErrorCode = Endpoint_WaitUntilReady()))
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
 530:	e4 cf       	rjmp	.-56     	; 0x4fa <Endpoint_Write_Stream_LE+0x18>
 532:	80 e0       	ldi	r24, 0x00	; 0
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
 534:	df 91       	pop	r29
}
 536:	cf 91       	pop	r28
 538:	1f 91       	pop	r17
 53a:	0f 91       	pop	r16
 53c:	ff 90       	pop	r15
 53e:	ef 90       	pop	r14
 540:	08 95       	ret

00000542 <Endpoint_Write_Control_Stream_LE>:
 542:	20 91 a0 01 	lds	r18, 0x01A0
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
 546:	30 91 a1 01 	lds	r19, 0x01A1
 54a:	26 17       	cp	r18, r22
 54c:	37 07       	cpc	r19, r23
 54e:	48 f0       	brcs	.+18     	; 0x562 <Endpoint_Write_Control_Stream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 550:	61 15       	cp	r22, r1
 552:	71 05       	cpc	r23, r1
 554:	39 f4       	brne	.+14     	; 0x564 <Endpoint_Write_Control_Stream_LE+0x22>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 556:	20 91 e8 00 	lds	r18, 0x00E8
 55a:	2e 77       	andi	r18, 0x7E	; 126
 55c:	20 93 e8 00 	sts	0x00E8, r18
 560:	01 c0       	rjmp	.+2      	; 0x564 <Endpoint_Write_Control_Stream_LE+0x22>
 562:	b9 01       	movw	r22, r18
 564:	30 e0       	ldi	r19, 0x00	; 0
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 566:	61 15       	cp	r22, r1
 568:	71 05       	cpc	r23, r1
 56a:	91 f1       	breq	.+100    	; 0x5d0 <Endpoint_Write_Control_Stream_LE+0x8e>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 56c:	20 91 e8 00 	lds	r18, 0x00E8
	{
		if (Endpoint_IsSETUPReceived())
 570:	23 fd       	sbrc	r18, 3
 572:	38 c0       	rjmp	.+112    	; 0x5e4 <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 574:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 578:	22 ff       	sbrs	r18, 2
 57a:	06 c0       	rjmp	.+12     	; 0x588 <Endpoint_Write_Control_Stream_LE+0x46>
 57c:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
 580:	82 ff       	sbrs	r24, 2
 582:	29 c0       	rjmp	.+82     	; 0x5d6 <Endpoint_Write_Control_Stream_LE+0x94>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 584:	80 e0       	ldi	r24, 0x00	; 0
 586:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 588:	2e b3       	in	r18, 0x1e	; 30
 58a:	22 23       	and	r18, r18
 58c:	69 f1       	breq	.+90     	; 0x5e8 <Endpoint_Write_Control_Stream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 58e:	2e b3       	in	r18, 0x1e	; 30
 590:	25 30       	cpi	r18, 0x05	; 5
 592:	61 f1       	breq	.+88     	; 0x5ec <Endpoint_Write_Control_Stream_LE+0xaa>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 594:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsINReady())
 598:	20 ff       	sbrs	r18, 0
 59a:	e5 cf       	rjmp	.-54     	; 0x566 <Endpoint_Write_Control_Stream_LE+0x24>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 59c:	20 91 f2 00 	lds	r18, 0x00F2
 5a0:	fc 01       	movw	r30, r24
 5a2:	cf 01       	movw	r24, r30
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 5a4:	61 15       	cp	r22, r1
 5a6:	71 05       	cpc	r23, r1
 5a8:	49 f0       	breq	.+18     	; 0x5bc <Endpoint_Write_Control_Stream_LE+0x7a>
 5aa:	28 30       	cpi	r18, 0x08	; 8
 5ac:	38 f4       	brcc	.+14     	; 0x5bc <Endpoint_Write_Control_Stream_LE+0x7a>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 5ae:	81 91       	ld	r24, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 5b0:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
 5b4:	61 50       	subi	r22, 0x01	; 1
 5b6:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 5b8:	2f 5f       	subi	r18, 0xFF	; 255
 5ba:	f3 cf       	rjmp	.-26     	; 0x5a2 <Endpoint_Write_Control_Stream_LE+0x60>
			}
			
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 5bc:	31 e0       	ldi	r19, 0x01	; 1
 5be:	28 30       	cpi	r18, 0x08	; 8
 5c0:	09 f0       	breq	.+2      	; 0x5c4 <Endpoint_Write_Control_Stream_LE+0x82>
 5c2:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 5c4:	20 91 e8 00 	lds	r18, 0x00E8
 5c8:	2e 77       	andi	r18, 0x7E	; 126
 5ca:	20 93 e8 00 	sts	0x00E8, r18
 5ce:	cb cf       	rjmp	.-106    	; 0x566 <Endpoint_Write_Control_Stream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 5d0:	31 11       	cpse	r19, r1
 5d2:	cc cf       	rjmp	.-104    	; 0x56c <Endpoint_Write_Control_Stream_LE+0x2a>
 5d4:	d3 cf       	rjmp	.-90     	; 0x57c <Endpoint_Write_Control_Stream_LE+0x3a>
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 5d6:	8e b3       	in	r24, 0x1e	; 30
 5d8:	88 23       	and	r24, r24
 5da:	31 f0       	breq	.+12     	; 0x5e8 <Endpoint_Write_Control_Stream_LE+0xa6>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 5dc:	8e b3       	in	r24, 0x1e	; 30
 5de:	85 30       	cpi	r24, 0x05	; 5
 5e0:	69 f6       	brne	.-102    	; 0x57c <Endpoint_Write_Control_Stream_LE+0x3a>
 5e2:	04 c0       	rjmp	.+8      	; 0x5ec <Endpoint_Write_Control_Stream_LE+0xaa>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 5e4:	81 e0       	ldi	r24, 0x01	; 1
 5e6:	08 95       	ret

		if (Endpoint_IsOUTReceived())
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 5e8:	82 e0       	ldi	r24, 0x02	; 2
 5ea:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 5ec:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 5ee:	08 95       	ret

000005f0 <Endpoint_Write_Control_PStream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
 5f0:	20 91 a0 01 	lds	r18, 0x01A0
 5f4:	30 91 a1 01 	lds	r19, 0x01A1
 5f8:	26 17       	cp	r18, r22
 5fa:	37 07       	cpc	r19, r23
 5fc:	48 f0       	brcs	.+18     	; 0x610 <Endpoint_Write_Control_PStream_LE+0x20>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
 5fe:	61 15       	cp	r22, r1
 600:	71 05       	cpc	r23, r1
 602:	39 f4       	brne	.+14     	; 0x612 <Endpoint_Write_Control_PStream_LE+0x22>
 604:	20 91 e8 00 	lds	r18, 0x00E8
 608:	2e 77       	andi	r18, 0x7E	; 126
 60a:	20 93 e8 00 	sts	0x00E8, r18
 60e:	01 c0       	rjmp	.+2      	; 0x612 <Endpoint_Write_Control_PStream_LE+0x22>
 610:	b9 01       	movw	r22, r18
		  
		if (Endpoint_IsINReady())
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 612:	30 e0       	ldi	r19, 0x00	; 0
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 614:	61 15       	cp	r22, r1
 616:	71 05       	cpc	r23, r1
 618:	99 f1       	breq	.+102    	; 0x680 <Endpoint_Write_Control_PStream_LE+0x90>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 61a:	20 91 e8 00 	lds	r18, 0x00E8
	{
		if (Endpoint_IsSETUPReceived())
 61e:	23 fd       	sbrc	r18, 3
 620:	39 c0       	rjmp	.+114    	; 0x694 <Endpoint_Write_Control_PStream_LE+0xa4>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 622:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
 626:	22 ff       	sbrs	r18, 2
 628:	06 c0       	rjmp	.+12     	; 0x636 <Endpoint_Write_Control_PStream_LE+0x46>
 62a:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
 62e:	82 ff       	sbrs	r24, 2
 630:	2a c0       	rjmp	.+84     	; 0x686 <Endpoint_Write_Control_PStream_LE+0x96>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
 632:	80 e0       	ldi	r24, 0x00	; 0
 634:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 636:	2e b3       	in	r18, 0x1e	; 30
 638:	22 23       	and	r18, r18
 63a:	71 f1       	breq	.+92     	; 0x698 <Endpoint_Write_Control_PStream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 63c:	2e b3       	in	r18, 0x1e	; 30
 63e:	25 30       	cpi	r18, 0x05	; 5
 640:	69 f1       	breq	.+90     	; 0x69c <Endpoint_Write_Control_PStream_LE+0xac>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 642:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsINReady())
 646:	20 ff       	sbrs	r18, 0
 648:	e5 cf       	rjmp	.-54     	; 0x614 <Endpoint_Write_Control_PStream_LE+0x24>
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 64a:	20 91 f2 00 	lds	r18, 0x00F2
		{
			uint8_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
 64e:	fc 01       	movw	r30, r24
 650:	cf 01       	movw	r24, r30
 652:	61 15       	cp	r22, r1
 654:	71 05       	cpc	r23, r1
 656:	51 f0       	breq	.+20     	; 0x66c <Endpoint_Write_Control_PStream_LE+0x7c>
 658:	28 30       	cpi	r18, 0x08	; 8
 65a:	40 f4       	brcc	.+16     	; 0x66c <Endpoint_Write_Control_PStream_LE+0x7c>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 65c:	84 91       	lpm	r24, Z
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 65e:	80 93 f1 00 	sts	0x00F1, r24
				Length--;
 662:	61 50       	subi	r22, 0x01	; 1
 664:	71 09       	sbc	r23, r1
				BytesInEndpoint++;
 666:	2f 5f       	subi	r18, 0xFF	; 255
 668:	31 96       	adiw	r30, 0x01	; 1
 66a:	f2 cf       	rjmp	.-28     	; 0x650 <Endpoint_Write_Control_PStream_LE+0x60>
			}
			
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
 66c:	31 e0       	ldi	r19, 0x01	; 1
 66e:	28 30       	cpi	r18, 0x08	; 8
 670:	09 f0       	breq	.+2      	; 0x674 <Endpoint_Write_Control_PStream_LE+0x84>
 672:	30 e0       	ldi	r19, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 674:	20 91 e8 00 	lds	r18, 0x00E8
 678:	2e 77       	andi	r18, 0x7E	; 126
 67a:	20 93 e8 00 	sts	0x00E8, r18
 67e:	ca cf       	rjmp	.-108    	; 0x614 <Endpoint_Write_Control_PStream_LE+0x24>
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
 680:	31 11       	cpse	r19, r1
 682:	cb cf       	rjmp	.-106    	; 0x61a <Endpoint_Write_Control_PStream_LE+0x2a>
 684:	d2 cf       	rjmp	.-92     	; 0x62a <Endpoint_Write_Control_PStream_LE+0x3a>
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 686:	8e b3       	in	r24, 0x1e	; 30
 688:	88 23       	and	r24, r24
 68a:	31 f0       	breq	.+12     	; 0x698 <Endpoint_Write_Control_PStream_LE+0xa8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 68c:	8e b3       	in	r24, 0x1e	; 30
 68e:	85 30       	cpi	r24, 0x05	; 5
 690:	61 f6       	brne	.-104    	; 0x62a <Endpoint_Write_Control_PStream_LE+0x3a>
 692:	04 c0       	rjmp	.+8      	; 0x69c <Endpoint_Write_Control_PStream_LE+0xac>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 694:	81 e0       	ldi	r24, 0x01	; 1
 696:	08 95       	ret

		if (Endpoint_IsOUTReceived())
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 698:	82 e0       	ldi	r24, 0x02	; 2
 69a:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 69c:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
 69e:	08 95       	ret

000006a0 <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	
	if (!(Length))
 6a0:	61 15       	cp	r22, r1
 6a2:	71 05       	cpc	r23, r1
 6a4:	29 f4       	brne	.+10     	; 0x6b0 <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 6a6:	20 91 e8 00 	lds	r18, 0x00E8
 6aa:	2b 77       	andi	r18, 0x7B	; 123
 6ac:	20 93 e8 00 	sts	0x00E8, r18
	  Endpoint_ClearOUT();
	
	while (Length)
 6b0:	61 15       	cp	r22, r1
 6b2:	71 05       	cpc	r23, r1
 6b4:	49 f1       	breq	.+82     	; 0x708 <Endpoint_Read_Control_Stream_LE+0x68>
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 6b6:	20 91 e8 00 	lds	r18, 0x00E8
	{
		if (Endpoint_IsSETUPReceived())
 6ba:	23 fd       	sbrc	r18, 3
 6bc:	2a c0       	rjmp	.+84     	; 0x712 <Endpoint_Read_Control_Stream_LE+0x72>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (USB_DeviceState == DEVICE_STATE_Unattached)
 6be:	2e b3       	in	r18, 0x1e	; 30
 6c0:	22 23       	and	r18, r18
 6c2:	59 f1       	breq	.+86     	; 0x71a <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 6c4:	2e b3       	in	r18, 0x1e	; 30
 6c6:	25 30       	cpi	r18, 0x05	; 5
 6c8:	51 f1       	breq	.+84     	; 0x71e <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if current endpoint is has received an OUT packet, false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
 6ca:	20 91 e8 00 	lds	r18, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
 6ce:	22 ff       	sbrs	r18, 2
 6d0:	f2 cf       	rjmp	.-28     	; 0x6b6 <Endpoint_Read_Control_Stream_LE+0x16>
 6d2:	fc 01       	movw	r30, r24
				#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
					return UEBCX;
				#elif defined(USB_SERIES_4_AVR)
					return (((uint16_t)UEBCHX << 8) | UEBCLX);
				#elif defined(USB_SERIES_2_AVR)
					return UEBCLX;
 6d4:	80 91 f2 00 	lds	r24, 0x00F2
		{
			while (Length && Endpoint_BytesInEndpoint())
 6d8:	88 23       	and	r24, r24
 6da:	71 f0       	breq	.+28     	; 0x6f8 <Endpoint_Read_Control_Stream_LE+0x58>
 6dc:	9f 01       	movw	r18, r30
 6de:	2f 5f       	subi	r18, 0xFF	; 255
 6e0:	3f 4f       	sbci	r19, 0xFF	; 255
 6e2:	c9 01       	movw	r24, r18
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 6e4:	40 91 f1 00 	lds	r20, 0x00F1
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
 6e8:	40 83       	st	Z, r20
				Length--;
 6ea:	61 50       	subi	r22, 0x01	; 1
 6ec:	71 09       	sbc	r23, r1
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		  
		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
 6ee:	61 15       	cp	r22, r1
 6f0:	71 05       	cpc	r23, r1
 6f2:	c9 f2       	breq	.-78     	; 0x6a6 <Endpoint_Read_Control_Stream_LE+0x6>
 6f4:	f9 01       	movw	r30, r18
 6f6:	ee cf       	rjmp	.-36     	; 0x6d4 <Endpoint_Read_Control_Stream_LE+0x34>
 6f8:	cf 01       	movw	r24, r30
 6fa:	d5 cf       	rjmp	.-86     	; 0x6a6 <Endpoint_Read_Control_Stream_LE+0x6>
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 6fc:	8e b3       	in	r24, 0x1e	; 30
 6fe:	88 23       	and	r24, r24
 700:	61 f0       	breq	.+24     	; 0x71a <Endpoint_Read_Control_Stream_LE+0x7a>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
 702:	8e b3       	in	r24, 0x1e	; 30
 704:	85 30       	cpi	r24, 0x05	; 5
 706:	59 f0       	breq	.+22     	; 0x71e <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 708:	80 91 e8 00 	lds	r24, 0x00E8
			
			Endpoint_ClearOUT();
		}		  
	}
	
	while (!(Endpoint_IsINReady()))
 70c:	80 ff       	sbrs	r24, 0
 70e:	f6 cf       	rjmp	.-20     	; 0x6fc <Endpoint_Read_Control_Stream_LE+0x5c>
 710:	02 c0       	rjmp	.+4      	; 0x716 <Endpoint_Read_Control_Stream_LE+0x76>
	  Endpoint_ClearOUT();
	
	while (Length)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
 712:	81 e0       	ldi	r24, 0x01	; 1
 714:	08 95       	ret
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
 716:	80 e0       	ldi	r24, 0x00	; 0
 718:	08 95       	ret
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
 71a:	82 e0       	ldi	r24, 0x02	; 2
 71c:	08 95       	ret
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
 71e:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}
	
	return ENDPOINT_RWCSTREAM_NoError;
}
 720:	08 95       	ret

00000722 <USB_ResetInterface>:
	#endif
}

void USB_ResetInterface(void)
{
	USB_INT_DisableAllInterrupts();
 722:	40 d0       	rcall	.+128    	; 0x7a4 <USB_INT_DisableAllInterrupts>
 724:	42 d0       	rcall	.+132    	; 0x7aa <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
 726:	1e ba       	out	0x1e, r1	; 30
 728:	10 92 98 01 	sts	0x0198, r1
	USB_HostState   = HOST_STATE_Unattached;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	USB_DeviceState = DEVICE_STATE_Unattached;
	USB_ConfigurationNumber  = 0;
 72c:	10 92 97 01 	sts	0x0197, r1
	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
	USB_RemoteWakeupEnabled  = false;
	#endif
	
	#if !defined(NO_DEVICE_SELF_POWER)
	USB_CurrentlySelfPowered = false;
 730:	84 e0       	ldi	r24, 0x04	; 4
 732:	89 bd       	out	0x29, r24	; 41
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 734:	89 b5       	in	r24, 0x29	; 41
 736:	82 60       	ori	r24, 0x02	; 2
				PLLCSR |= (1 << PLLE);
 738:	89 bd       	out	0x29, r24	; 41
 73a:	09 b4       	in	r0, 0x29	; 41
 73c:	00 fe       	sbrs	r0, 0
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
		#endif

		USB_PLL_On();
		while (!(USB_PLL_IsReady()));
 73e:	fd cf       	rjmp	.-6      	; 0x73a <USB_ResetInterface+0x18>
 740:	80 91 d8 00 	lds	r24, 0x00D8
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				const uint8_t Temp = USBCON;
 744:	98 2f       	mov	r25, r24
 746:	9f 77       	andi	r25, 0x7F	; 127
				
				USBCON = (Temp & ~(1 << USBE));
 748:	90 93 d8 00 	sts	0x00D8, r25
 74c:	80 68       	ori	r24, 0x80	; 128
 74e:	80 93 d8 00 	sts	0x00D8, r24
				USBCON = (Temp |  (1 << USBE));
 752:	80 91 63 00 	lds	r24, 0x0063
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON  |=  (1 << UVREGE);
			#else
				REGCR   &= ~(1 << REGDIS);
 756:	8e 7f       	andi	r24, 0xFE	; 254
 758:	80 93 63 00 	sts	0x0063, r24
 75c:	80 91 d8 00 	lds	r24, 0x00D8
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 760:	8f 7d       	andi	r24, 0xDF	; 223
 762:	80 93 d8 00 	sts	0x00D8, r24
 766:	80 91 e0 00 	lds	r24, 0x00E0
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
 76a:	8e 7f       	andi	r24, 0xFE	; 254
 76c:	80 93 e0 00 	sts	0x00E0, r24
 770:	80 91 e1 00 	lds	r24, 0x00E1
	#endif

	USB_Attach();
	
	#if defined(USB_DEVICE_ONLY)
	USB_INT_Clear(USB_INT_SUSPEND);
 774:	8e 7f       	andi	r24, 0xFE	; 254
 776:	80 93 e1 00 	sts	0x00E1, r24
 77a:	80 91 e2 00 	lds	r24, 0x00E2
	USB_INT_Enable(USB_INT_SUSPEND);
 77e:	81 60       	ori	r24, 0x01	; 1
 780:	80 93 e2 00 	sts	0x00E2, r24
 784:	80 91 e1 00 	lds	r24, 0x00E1
	USB_INT_Clear(USB_INT_EORSTI);
 788:	87 7f       	andi	r24, 0xF7	; 247
 78a:	80 93 e1 00 	sts	0x00E1, r24
 78e:	80 91 e2 00 	lds	r24, 0x00E2
	USB_INT_Enable(USB_INT_EORSTI);
 792:	88 60       	ori	r24, 0x08	; 8
 794:	80 93 e2 00 	sts	0x00E2, r24
 798:	08 95       	ret

0000079a <USB_Init>:
 79a:	c3 df       	rcall	.-122    	; 0x722 <USB_ResetInterface>
 79c:	81 e0       	ldi	r24, 0x01	; 1

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_On();
	#endif

	USB_IsInitialized = true;
 79e:	80 93 99 01 	sts	0x0199, r24
 7a2:	08 95       	ret

000007a4 <USB_INT_DisableAllInterrupts>:
	UHIEN   = 0;
	OTGIEN  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
 7a4:	10 92 e2 00 	sts	0x00E2, r1
 7a8:	08 95       	ret

000007aa <USB_INT_ClearAllInterrupts>:
	UHINT   = 0;
	OTGINT  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
 7aa:	10 92 e1 00 	sts	0x00E1, r1
 7ae:	08 95       	ret

000007b0 <__vector_11>:
	#endif
}

ISR(USB_GEN_vect, ISR_BLOCK)
{
 7b0:	1f 92       	push	r1
 7b2:	0f 92       	push	r0
 7b4:	0f b6       	in	r0, 0x3f	; 63
 7b6:	0f 92       	push	r0
 7b8:	11 24       	eor	r1, r1
 7ba:	2f 93       	push	r18
 7bc:	3f 93       	push	r19
 7be:	4f 93       	push	r20
 7c0:	5f 93       	push	r21
 7c2:	6f 93       	push	r22
 7c4:	7f 93       	push	r23
 7c6:	8f 93       	push	r24
 7c8:	9f 93       	push	r25
 7ca:	af 93       	push	r26
 7cc:	bf 93       	push	r27
 7ce:	ef 93       	push	r30
 7d0:	ff 93       	push	r31
			EVENT_USB_Device_Disconnect();
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
 7d2:	80 91 e1 00 	lds	r24, 0x00E1
 7d6:	80 ff       	sbrs	r24, 0
 7d8:	1b c0       	rjmp	.+54     	; 0x810 <__vector_11+0x60>
 7da:	80 91 e2 00 	lds	r24, 0x00E2
 7de:	80 ff       	sbrs	r24, 0
 7e0:	17 c0       	rjmp	.+46     	; 0x810 <__vector_11+0x60>
	{
		USB_INT_Clear(USB_INT_SUSPEND);
 7e2:	80 91 e1 00 	lds	r24, 0x00E1
 7e6:	8e 7f       	andi	r24, 0xFE	; 254
 7e8:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPEND);
 7ec:	80 91 e2 00 	lds	r24, 0x00E2
 7f0:	8e 7f       	andi	r24, 0xFE	; 254
 7f2:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
 7f6:	80 91 e2 00 	lds	r24, 0x00E2
 7fa:	80 61       	ori	r24, 0x10	; 16
 7fc:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON  |=  (1 << FRZCLK);
 800:	80 91 d8 00 	lds	r24, 0x00D8
 804:	80 62       	ori	r24, 0x20	; 32
 806:	80 93 d8 00 	sts	0x00D8, r24
			}
			
			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR  = 0;
 80a:	19 bc       	out	0x29, r1	; 41
		
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
 80c:	1e ba       	out	0x1e, r1	; 30
		EVENT_USB_Device_Disconnect();
 80e:	f4 dc       	rcall	.-1560   	; 0x1f8 <EVENT_USB_Device_Disconnect>
 810:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = DEVICE_STATE_Suspended;
		EVENT_USB_Device_Suspend();
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUP) && USB_INT_IsEnabled(USB_INT_WAKEUP))
 814:	84 ff       	sbrs	r24, 4
 816:	29 c0       	rjmp	.+82     	; 0x86a <__vector_11+0xba>
 818:	80 91 e2 00 	lds	r24, 0x00E2
 81c:	84 ff       	sbrs	r24, 4
 81e:	25 c0       	rjmp	.+74     	; 0x86a <__vector_11+0xba>
 820:	84 e0       	ldi	r24, 0x04	; 4
	#if !defined(__DOXYGEN__)
		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR  = USB_PLL_PSC;
 822:	89 bd       	out	0x29, r24	; 41
 824:	89 b5       	in	r24, 0x29	; 41
				PLLCSR |= (1 << PLLE);
 826:	82 60       	ori	r24, 0x02	; 2
 828:	89 bd       	out	0x29, r24	; 41
 82a:	09 b4       	in	r0, 0x29	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
 82c:	00 fe       	sbrs	r0, 0
 82e:	fd cf       	rjmp	.-6      	; 0x82a <__vector_11+0x7a>
 830:	80 91 d8 00 	lds	r24, 0x00D8
			}
			
			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON  &= ~(1 << FRZCLK);
 834:	8f 7d       	andi	r24, 0xDF	; 223
 836:	80 93 d8 00 	sts	0x00D8, r24
 83a:	80 91 e1 00 	lds	r24, 0x00E1
		}

		USB_CLK_Unfreeze();

		USB_INT_Clear(USB_INT_WAKEUP);
 83e:	8f 7e       	andi	r24, 0xEF	; 239
 840:	80 93 e1 00 	sts	0x00E1, r24
 844:	80 91 e2 00 	lds	r24, 0x00E2

		USB_INT_Disable(USB_INT_WAKEUP);
 848:	8f 7e       	andi	r24, 0xEF	; 239
 84a:	80 93 e2 00 	sts	0x00E2, r24
 84e:	80 91 e2 00 	lds	r24, 0x00E2
		USB_INT_Enable(USB_INT_SUSPEND);
 852:	81 60       	ori	r24, 0x01	; 1
 854:	80 93 e2 00 	sts	0x00E2, r24
 858:	80 91 98 01 	lds	r24, 0x0198
		
		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
 85c:	88 23       	and	r24, r24
 85e:	11 f0       	breq	.+4      	; 0x864 <__vector_11+0xb4>
 860:	84 e0       	ldi	r24, 0x04	; 4
 862:	01 c0       	rjmp	.+2      	; 0x866 <__vector_11+0xb6>
 864:	81 e0       	ldi	r24, 0x01	; 1
 866:	8e bb       	out	0x1e, r24	; 30
 868:	c6 dc       	rcall	.-1652   	; 0x1f6 <EVENT_USB_Device_Connect>
		EVENT_USB_Device_Connect();
 86a:	80 91 e1 00 	lds	r24, 0x00E1
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
		EVENT_USB_Device_WakeUp();		
		#endif
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
 86e:	83 ff       	sbrs	r24, 3
 870:	22 c0       	rjmp	.+68     	; 0x8b6 <__vector_11+0x106>
 872:	80 91 e2 00 	lds	r24, 0x00E2
 876:	83 ff       	sbrs	r24, 3
 878:	1e c0       	rjmp	.+60     	; 0x8b6 <__vector_11+0x106>
 87a:	80 91 e1 00 	lds	r24, 0x00E1
	{
		USB_INT_Clear(USB_INT_EORSTI);
 87e:	87 7f       	andi	r24, 0xF7	; 247
 880:	80 93 e1 00 	sts	0x00E1, r24
 884:	82 e0       	ldi	r24, 0x02	; 2
 886:	8e bb       	out	0x1e, r24	; 30

		USB_DeviceState         = DEVICE_STATE_Default;
 888:	10 92 98 01 	sts	0x0198, r1
		USB_ConfigurationNumber = 0;
 88c:	80 91 e1 00 	lds	r24, 0x00E1

		USB_INT_Clear(USB_INT_SUSPEND);
 890:	8e 7f       	andi	r24, 0xFE	; 254
 892:	80 93 e1 00 	sts	0x00E1, r24
 896:	80 91 e2 00 	lds	r24, 0x00E2
		USB_INT_Disable(USB_INT_SUSPEND);
 89a:	8e 7f       	andi	r24, 0xFE	; 254
 89c:	80 93 e2 00 	sts	0x00E2, r24
 8a0:	80 91 e2 00 	lds	r24, 0x00E2
		USB_INT_Enable(USB_INT_WAKEUP);
 8a4:	80 61       	ori	r24, 0x10	; 16
 8a6:	80 93 e2 00 	sts	0x00E2, r24
 8aa:	bb dd       	rcall	.-1162   	; 0x422 <Endpoint_ClearEndpoints>
 8ac:	42 e0       	ldi	r20, 0x02	; 2

		Endpoint_ClearEndpoints();
 8ae:	60 e0       	ldi	r22, 0x00	; 0
 8b0:	80 e0       	ldi	r24, 0x00	; 0
			                                                    const uint8_t Type,
			                                                    const uint8_t Direction,
			                                                    const uint16_t Size,
			                                                    const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 8b2:	a4 dd       	rcall	.-1208   	; 0x3fc <Endpoint_ConfigureEndpoint_Prv>
 8b4:	0b d1       	rcall	.+534    	; 0xacc <USB_Event_Stub>
 8b6:	80 91 e1 00 	lds	r24, 0x00E1
 8ba:	82 ff       	sbrs	r24, 2

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
 8bc:	0a c0       	rjmp	.+20     	; 0x8d2 <__vector_11+0x122>
 8be:	80 91 e2 00 	lds	r24, 0x00E2
	}
	
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
 8c2:	82 ff       	sbrs	r24, 2
 8c4:	06 c0       	rjmp	.+12     	; 0x8d2 <__vector_11+0x122>
 8c6:	80 91 e1 00 	lds	r24, 0x00E1
 8ca:	8b 7f       	andi	r24, 0xFB	; 251
 8cc:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_SOFI);
 8d0:	a0 dc       	rcall	.-1728   	; 0x212 <EVENT_USB_Device_StartOfFrame>
 8d2:	ff 91       	pop	r31
 8d4:	ef 91       	pop	r30
 8d6:	bf 91       	pop	r27
 8d8:	af 91       	pop	r26
		
		EVENT_USB_Device_StartOfFrame();
 8da:	9f 91       	pop	r25
 8dc:	8f 91       	pop	r24
		EVENT_USB_UIDChange();

		USB_ResetInterface();
	}
	#endif
}
 8de:	7f 91       	pop	r23
 8e0:	6f 91       	pop	r22
 8e2:	5f 91       	pop	r21
 8e4:	4f 91       	pop	r20
 8e6:	3f 91       	pop	r19
 8e8:	2f 91       	pop	r18
 8ea:	0f 90       	pop	r0
 8ec:	0f be       	out	0x3f, r0	; 63
 8ee:	0f 90       	pop	r0
 8f0:	1f 90       	pop	r1
 8f2:	18 95       	reti

000008f4 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
 8f4:	1f 93       	push	r17
 8f6:	cf 93       	push	r28
 8f8:	df 93       	push	r29
 8fa:	00 d0       	rcall	.+0      	; 0x8fc <USB_Device_ProcessControlRequest+0x8>
 8fc:	cd b7       	in	r28, 0x3d	; 61
 8fe:	de b7       	in	r29, 0x3e	; 62
 900:	ea e9       	ldi	r30, 0x9A	; 154
 902:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
 904:	80 91 f1 00 	lds	r24, 0x00F1
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
 908:	81 93       	st	Z+, r24
void USB_Device_ProcessControlRequest(void)
{
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
 90a:	81 e0       	ldi	r24, 0x01	; 1
 90c:	e2 3a       	cpi	r30, 0xA2	; 162
 90e:	f8 07       	cpc	r31, r24
 910:	c9 f7       	brne	.-14     	; 0x904 <USB_Device_ProcessControlRequest+0x10>
	  *(RequestHeader++) = Endpoint_Read_Byte();
	  
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
 912:	20 91 9a 01 	lds	r18, 0x019A
	
	switch (USB_ControlRequest.bRequest)
 916:	30 91 9b 01 	lds	r19, 0x019B
 91a:	83 2f       	mov	r24, r19
 91c:	90 e0       	ldi	r25, 0x00	; 0
 91e:	8a 30       	cpi	r24, 0x0A	; 10
 920:	91 05       	cpc	r25, r1
 922:	08 f0       	brcs	.+2      	; 0x926 <USB_Device_ProcessControlRequest+0x32>
 924:	cb c0       	rjmp	.+406    	; 0xabc <USB_Device_ProcessControlRequest+0x1c8>
 926:	fc 01       	movw	r30, r24
 928:	e6 5c       	subi	r30, 0xC6	; 198
 92a:	ff 4f       	sbci	r31, 0xFF	; 255
 92c:	c7 c2       	rjmp	.+1422   	; 0xebc <__tablejump2__>
 92e:	20 38       	cpi	r18, 0x80	; 128
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 930:	81 f0       	breq	.+32     	; 0x952 <USB_Device_ProcessControlRequest+0x5e>
 932:	22 38       	cpi	r18, 0x82	; 130
 934:	09 f0       	breq	.+2      	; 0x938 <USB_Device_ProcessControlRequest+0x44>
 936:	c2 c0       	rjmp	.+388    	; 0xabc <USB_Device_ProcessControlRequest+0x1c8>
 938:	80 91 9e 01 	lds	r24, 0x019E
	#endif
			break;
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 93c:	87 70       	andi	r24, 0x07	; 7
 93e:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 942:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean true if the currently selected endpoint is stalled, false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
 946:	95 fb       	bst	r25, 5
 948:	99 27       	eor	r25, r25
 94a:	90 f9       	bld	r25, 0
 94c:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 950:	02 c0       	rjmp	.+4      	; 0x956 <USB_Device_ProcessControlRequest+0x62>
 952:	90 91 97 01 	lds	r25, 0x0197
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
 956:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 95a:	87 7f       	andi	r24, 0xF7	; 247
 95c:	80 93 e8 00 	sts	0x00E8, r24
 960:	90 93 f1 00 	sts	0x00F1, r25
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
 964:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Word >> 8);
 968:	7c c0       	rjmp	.+248    	; 0xa62 <USB_Device_ProcessControlRequest+0x16e>
 96a:	82 2f       	mov	r24, r18
			}

			break;
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 96c:	8d 7f       	andi	r24, 0xFD	; 253
 96e:	09 f0       	breq	.+2      	; 0x972 <USB_Device_ProcessControlRequest+0x7e>
 970:	a5 c0       	rjmp	.+330    	; 0xabc <USB_Device_ProcessControlRequest+0x1c8>
 972:	22 30       	cpi	r18, 0x02	; 2
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
 974:	09 f0       	breq	.+2      	; 0x978 <USB_Device_ProcessControlRequest+0x84>
 976:	93 c0       	rjmp	.+294    	; 0xa9e <USB_Device_ProcessControlRequest+0x1aa>
 978:	80 91 9c 01 	lds	r24, 0x019C
			
			break;			
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
 97c:	81 11       	cpse	r24, r1
 97e:	24 c0       	rjmp	.+72     	; 0x9c8 <USB_Device_ProcessControlRequest+0xd4>
 980:	20 91 9e 01 	lds	r18, 0x019E
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
 984:	27 70       	andi	r18, 0x07	; 7
 986:	09 f4       	brne	.+2      	; 0x98a <USB_Device_ProcessControlRequest+0x96>
				
				if (EndpointIndex == ENDPOINT_CONTROLEP)
 988:	8a c0       	rjmp	.+276    	; 0xa9e <USB_Device_ProcessControlRequest+0x1aa>
 98a:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 98e:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean True if the currently selected endpoint is enabled, false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
 992:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (!(Endpoint_IsEnabled()))
 994:	84 c0       	rjmp	.+264    	; 0xa9e <USB_Device_ProcessControlRequest+0x1aa>
 996:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 99a:	33 30       	cpi	r19, 0x03	; 3
				  return;

				if (USB_ControlRequest.bRequest == REQ_SetFeature)
 99c:	11 f4       	brne	.+4      	; 0x9a2 <USB_Device_ProcessControlRequest+0xae>
 99e:	80 62       	ori	r24, 0x20	; 32
 9a0:	11 c0       	rjmp	.+34     	; 0x9c4 <USB_Device_ProcessControlRequest+0xd0>
 9a2:	80 61       	ori	r24, 0x10	; 16
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
 9a4:	80 93 eb 00 	sts	0x00EB, r24
 9a8:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] EndpointNumber Endpoint number whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetFIFO(const uint8_t EndpointNumber)
			{
				UERST = (1 << EndpointNumber);
 9aa:	90 e0       	ldi	r25, 0x00	; 0
 9ac:	02 2e       	mov	r0, r18
 9ae:	01 c0       	rjmp	.+2      	; 0x9b2 <USB_Device_ProcessControlRequest+0xbe>
 9b0:	88 0f       	add	r24, r24
 9b2:	0a 94       	dec	r0
 9b4:	ea f7       	brpl	.-6      	; 0x9b0 <USB_Device_ProcessControlRequest+0xbc>
 9b6:	80 93 ea 00 	sts	0x00EA, r24
 9ba:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
 9be:	80 91 eb 00 	lds	r24, 0x00EB
			
			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
 9c2:	88 60       	ori	r24, 0x08	; 8
 9c4:	80 93 eb 00 	sts	0x00EB, r24
 9c8:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 9cc:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 9d0:	87 7f       	andi	r24, 0xF7	; 247
 9d2:	4a c0       	rjmp	.+148    	; 0xa68 <USB_Device_ProcessControlRequest+0x174>
 9d4:	21 11       	cpse	r18, r1
				RequestHandled = true;
			}

			break;
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 9d6:	72 c0       	rjmp	.+228    	; 0xabc <USB_Device_ProcessControlRequest+0x1c8>
 9d8:	10 91 9c 01 	lds	r17, 0x019C
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 9dc:	80 91 e8 00 	lds	r24, 0x00E8
 9e0:	87 7f       	andi	r24, 0xF7	; 247
 9e2:	80 93 e8 00 	sts	0x00E8, r24
 9e6:	31 dd       	rcall	.-1438   	; 0x44a <Endpoint_ClearStatusStage>

	Endpoint_ClearSETUP();
	
	Endpoint_ClearStatusStage();
 9e8:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean true if the current endpoint is ready for an IN packet, false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI))  ? true : false);
 9ec:	80 fd       	sbrc	r24, 0
 9ee:	04 c0       	rjmp	.+8      	; 0x9f8 <USB_Device_ProcessControlRequest+0x104>
	
	while (!(Endpoint_IsINReady()))
 9f0:	8e b3       	in	r24, 0x1e	; 30
 9f2:	81 11       	cpse	r24, r1
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
 9f4:	f9 cf       	rjmp	.-14     	; 0x9e8 <USB_Device_ProcessControlRequest+0xf4>
 9f6:	53 c0       	rjmp	.+166    	; 0xa9e <USB_Device_ProcessControlRequest+0x1aa>
 9f8:	81 2f       	mov	r24, r17
 9fa:	8f 77       	andi	r24, 0x7F	; 127
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
 9fc:	11 f0       	breq	.+4      	; 0xa02 <USB_Device_ProcessControlRequest+0x10e>
 9fe:	93 e0       	ldi	r25, 0x03	; 3
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return;
	}

	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
 a00:	01 c0       	rjmp	.+2      	; 0xa04 <USB_Device_ProcessControlRequest+0x110>
 a02:	92 e0       	ldi	r25, 0x02	; 2
 a04:	9e bb       	out	0x1e, r25	; 30
 a06:	80 68       	ori	r24, 0x80	; 128
 a08:	80 93 e3 00 	sts	0x00E3, r24
			#endif
			
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				UDADDR = ((1 << ADDEN) | (Address & 0x7F));
 a0c:	48 c0       	rjmp	.+144    	; 0xa9e <USB_Device_ProcessControlRequest+0x1aa>
 a0e:	20 58       	subi	r18, 0x80	; 128
 a10:	22 30       	cpi	r18, 0x02	; 2
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
 a12:	08 f0       	brcs	.+2      	; 0xa16 <USB_Device_ProcessControlRequest+0x122>
 a14:	53 c0       	rjmp	.+166    	; 0xabc <USB_Device_ProcessControlRequest+0x1c8>
 a16:	ae 01       	movw	r20, r28
 a18:	4f 5f       	subi	r20, 0xFF	; 255
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif
	
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
 a1a:	5f 4f       	sbci	r21, 0xFF	; 255
 a1c:	60 91 9e 01 	lds	r22, 0x019E
 a20:	80 91 9c 01 	lds	r24, 0x019C
 a24:	90 91 9d 01 	lds	r25, 0x019D
 a28:	98 dc       	rcall	.-1744   	; 0x35a <CALLBACK_USB_GetDescriptor>
 a2a:	00 97       	sbiw	r24, 0x00	; 0
 a2c:	c1 f1       	breq	.+112    	; 0xa9e <USB_Device_ProcessControlRequest+0x1aa>
 a2e:	20 91 e8 00 	lds	r18, 0x00E8
 a32:	27 7f       	andi	r18, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a34:	20 93 e8 00 	sts	0x00E8, r18
 a38:	bc 01       	movw	r22, r24
 a3a:	89 81       	ldd	r24, Y+1	; 0x01
 a3c:	9a 81       	ldd	r25, Y+2	; 0x02
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);	
 a3e:	d8 dd       	rcall	.-1104   	; 0x5f0 <Endpoint_Write_Control_PStream_LE>
 a40:	80 91 e8 00 	lds	r24, 0x00E8
 a44:	8b 77       	andi	r24, 0x7B	; 123
 a46:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 a4a:	29 c0       	rjmp	.+82     	; 0xa9e <USB_Device_ProcessControlRequest+0x1aa>
 a4c:	20 38       	cpi	r18, 0x80	; 128
 a4e:	b1 f5       	brne	.+108    	; 0xabc <USB_Device_ProcessControlRequest+0x1c8>
 a50:	80 91 e8 00 	lds	r24, 0x00E8
				RequestHandled = true;
			}
			
			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
 a54:	87 7f       	andi	r24, 0xF7	; 247
 a56:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a5a:	80 91 98 01 	lds	r24, 0x0198
 a5e:	80 93 f1 00 	sts	0x00F1, r24

void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_Byte(USB_ConfigurationNumber);
 a62:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 a66:	8e 77       	andi	r24, 0x7E	; 126
 a68:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 a6c:	ee dc       	rcall	.-1572   	; 0x44a <Endpoint_ClearStatusStage>
 a6e:	17 c0       	rjmp	.+46     	; 0xa9e <USB_Device_ProcessControlRequest+0x1aa>
 a70:	21 11       	cpse	r18, r1
 a72:	24 c0       	rjmp	.+72     	; 0xabc <USB_Device_ProcessControlRequest+0x1c8>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
 a74:	90 91 9c 01 	lds	r25, 0x019C
 a78:	92 30       	cpi	r25, 0x02	; 2
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
 a7a:	88 f4       	brcc	.+34     	; 0xa9e <USB_Device_ProcessControlRequest+0x1aa>
 a7c:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
 a80:	87 7f       	andi	r24, 0xF7	; 247
 a82:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 a86:	90 93 98 01 	sts	0x0198, r25
 a8a:	df dc       	rcall	.-1602   	; 0x44a <Endpoint_ClearStatusStage>
 a8c:	80 91 98 01 	lds	r24, 0x0198
	}
#endif
	
	Endpoint_ClearSETUP();

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
 a90:	88 23       	and	r24, r24
 a92:	11 f0       	breq	.+4      	; 0xa98 <USB_Device_ProcessControlRequest+0x1a4>

	Endpoint_ClearStatusStage();
 a94:	84 e0       	ldi	r24, 0x04	; 4
 a96:	01 c0       	rjmp	.+2      	; 0xa9a <USB_Device_ProcessControlRequest+0x1a6>

	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
 a98:	83 e0       	ldi	r24, 0x03	; 3
 a9a:	8e bb       	out	0x1e, r24	; 30
 a9c:	ae db       	rcall	.-2212   	; 0x1fa <EVENT_USB_Device_ConfigurationChanged>
 a9e:	80 91 e8 00 	lds	r24, 0x00E8
 aa2:	83 ff       	sbrs	r24, 3
 aa4:	0d c0       	rjmp	.+26     	; 0xac0 <USB_Device_ProcessControlRequest+0x1cc>
 aa6:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
 aaa:	80 62       	ori	r24, 0x20	; 32
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 aac:	80 93 eb 00 	sts	0x00EB, r24
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
	  
	if (Endpoint_IsSETUPReceived())
 ab0:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \ingroup Group_EndpointPacketManagement
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
 ab4:	87 7f       	andi	r24, 0xF7	; 247
 ab6:	80 93 e8 00 	sts	0x00E8, r24
 aba:	02 c0       	rjmp	.+4      	; 0xac0 <USB_Device_ProcessControlRequest+0x1cc>
 abc:	a7 db       	rcall	.-2226   	; 0x20c <EVENT_USB_Device_UnhandledControlRequest>
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 abe:	ef cf       	rjmp	.-34     	; 0xa9e <USB_Device_ProcessControlRequest+0x1aa>
 ac0:	0f 90       	pop	r0
 ac2:	0f 90       	pop	r0
 ac4:	df 91       	pop	r29
 ac6:	cf 91       	pop	r28
 ac8:	1f 91       	pop	r17

			break;
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
 aca:	08 95       	ret

00000acc <USB_Event_Stub>:
#define  __INCLUDE_FROM_EVENTS_C
#define  __INCLUDE_FROM_USB_DRIVER
#include "Events.h"

void USB_Event_Stub(void)
{
 acc:	08 95       	ret

00000ace <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
 ace:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
 ad0:	8e b3       	in	r24, 0x1e	; 30
 ad2:	88 23       	and	r24, r24
 ad4:	59 f0       	breq	.+22     	; 0xaec <USB_USBTask+0x1e>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return (UENUM & ENDPOINT_EPNUM_MASK);
 ad6:	c0 91 e9 00 	lds	r28, 0x00E9
 ada:	c7 70       	andi	r28, 0x07	; 7
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 adc:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 ae0:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
	
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
 ae4:	83 fd       	sbrc	r24, 3
		  USB_Device_ProcessControlRequest();
 ae6:	06 df       	rcall	.-500    	; 0x8f4 <USB_Device_ProcessControlRequest>
 ae8:	c0 93 e9 00 	sts	0x00E9, r28
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 aec:	cf 91       	pop	r28
		if (USB_CurrentMode == USB_MODE_DEVICE)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_HOST)
		  USB_HostTask();
	#endif
}
 aee:	08 95       	ret

00000af0 <HID_Device_ProcessControlRequest>:

#define  __INCLUDE_FROM_HID_DRIVER
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 af0:	8f 92       	push	r8
 af2:	9f 92       	push	r9
 af4:	af 92       	push	r10
 af6:	bf 92       	push	r11
 af8:	cf 92       	push	r12
 afa:	df 92       	push	r13
 afc:	ef 92       	push	r14
 afe:	ff 92       	push	r15
 b00:	0f 93       	push	r16
 b02:	1f 93       	push	r17
 b04:	cf 93       	push	r28
 b06:	df 93       	push	r29
 b08:	00 d0       	rcall	.+0      	; 0xb0a <HID_Device_ProcessControlRequest+0x1a>
 b0a:	1f 92       	push	r1
 b0c:	cd b7       	in	r28, 0x3d	; 61
 b0e:	de b7       	in	r29, 0x3e	; 62
 b10:	7c 01       	movw	r14, r24
				Endpoint_ClearStatusStage();
			}

			break;
	}
}
 b12:	ad b6       	in	r10, 0x3d	; 61
 b14:	be b6       	in	r11, 0x3e	; 62
			 *  \return Boolean true if the selected endpoint has received a SETUP packet, false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
 b16:	80 91 e8 00 	lds	r24, 0x00E8
#define  __INCLUDE_FROM_HID_DRIVER
#include "HID.h"

void HID_Device_ProcessControlRequest(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (!(Endpoint_IsSETUPReceived()))
 b1a:	83 ff       	sbrs	r24, 3
 b1c:	ee c0       	rjmp	.+476    	; 0xcfa <HID_Device_ProcessControlRequest+0x20a>
	  return;
	  
	if (USB_ControlRequest.wIndex != HIDInterfaceInfo->Config.InterfaceNumber)
 b1e:	f7 01       	movw	r30, r14
 b20:	80 81       	ld	r24, Z
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	20 91 9e 01 	lds	r18, 0x019E
 b28:	30 91 9f 01 	lds	r19, 0x019F
 b2c:	28 17       	cp	r18, r24
 b2e:	39 07       	cpc	r19, r25
 b30:	09 f0       	breq	.+2      	; 0xb34 <HID_Device_ProcessControlRequest+0x44>
 b32:	e3 c0       	rjmp	.+454    	; 0xcfa <HID_Device_ProcessControlRequest+0x20a>
	  return;

	switch (USB_ControlRequest.bRequest)
 b34:	80 91 9b 01 	lds	r24, 0x019B
 b38:	83 30       	cpi	r24, 0x03	; 3
 b3a:	09 f4       	brne	.+2      	; 0xb3e <HID_Device_ProcessControlRequest+0x4e>
 b3c:	90 c0       	rjmp	.+288    	; 0xc5e <HID_Device_ProcessControlRequest+0x16e>
 b3e:	30 f4       	brcc	.+12     	; 0xb4c <HID_Device_ProcessControlRequest+0x5c>
 b40:	81 30       	cpi	r24, 0x01	; 1
 b42:	71 f0       	breq	.+28     	; 0xb60 <HID_Device_ProcessControlRequest+0x70>
 b44:	82 30       	cpi	r24, 0x02	; 2
 b46:	09 f4       	brne	.+2      	; 0xb4a <HID_Device_ProcessControlRequest+0x5a>
 b48:	c0 c0       	rjmp	.+384    	; 0xcca <HID_Device_ProcessControlRequest+0x1da>
 b4a:	d7 c0       	rjmp	.+430    	; 0xcfa <HID_Device_ProcessControlRequest+0x20a>
 b4c:	8a 30       	cpi	r24, 0x0A	; 10
 b4e:	09 f4       	brne	.+2      	; 0xb52 <HID_Device_ProcessControlRequest+0x62>
 b50:	a5 c0       	rjmp	.+330    	; 0xc9c <HID_Device_ProcessControlRequest+0x1ac>
 b52:	8b 30       	cpi	r24, 0x0B	; 11
 b54:	09 f4       	brne	.+2      	; 0xb58 <HID_Device_ProcessControlRequest+0x68>
 b56:	90 c0       	rjmp	.+288    	; 0xc78 <HID_Device_ProcessControlRequest+0x188>
 b58:	89 30       	cpi	r24, 0x09	; 9
 b5a:	09 f0       	breq	.+2      	; 0xb5e <HID_Device_ProcessControlRequest+0x6e>
 b5c:	ce c0       	rjmp	.+412    	; 0xcfa <HID_Device_ProcessControlRequest+0x20a>
 b5e:	4c c0       	rjmp	.+152    	; 0xbf8 <HID_Device_ProcessControlRequest+0x108>
	{
		case REQ_GetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 b60:	80 91 9a 01 	lds	r24, 0x019A
 b64:	81 3a       	cpi	r24, 0xA1	; 161
 b66:	09 f0       	breq	.+2      	; 0xb6a <HID_Device_ProcessControlRequest+0x7a>
 b68:	c8 c0       	rjmp	.+400    	; 0xcfa <HID_Device_ProcessControlRequest+0x20a>
 b6a:	8d b6       	in	r8, 0x3d	; 61
 b6c:	9e b6       	in	r9, 0x3e	; 62
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 b6e:	80 91 e8 00 	lds	r24, 0x00E8
 b72:	87 7f       	andi	r24, 0xF7	; 247
 b74:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();	

				uint16_t ReportSize = 0;
 b78:	1a 82       	std	Y+2, r1	; 0x02
 b7a:	19 82       	std	Y+1, r1	; 0x01
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 b7c:	80 91 9c 01 	lds	r24, 0x019C
 b80:	10 91 9d 01 	lds	r17, 0x019D
 b84:	8b 83       	std	Y+3, r24	; 0x03
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 b86:	f7 01       	movw	r30, r14
 b88:	47 81       	ldd	r20, Z+7	; 0x07
 b8a:	50 e0       	ldi	r21, 0x00	; 0
 b8c:	8d b7       	in	r24, 0x3d	; 61
 b8e:	9e b7       	in	r25, 0x3e	; 62
 b90:	84 1b       	sub	r24, r20
 b92:	95 0b       	sbc	r25, r21
 b94:	0f b6       	in	r0, 0x3f	; 63
 b96:	f8 94       	cli
 b98:	9e bf       	out	0x3e, r25	; 62
 b9a:	0f be       	out	0x3f, r0	; 63
 b9c:	8d bf       	out	0x3d, r24	; 61
 b9e:	ed b7       	in	r30, 0x3d	; 61
 ba0:	fe b7       	in	r31, 0x3e	; 62
 ba2:	31 96       	adiw	r30, 0x01	; 1
 ba4:	6f 01       	movw	r12, r30

				memset(ReportData, 0, sizeof(ReportData));
 ba6:	60 e0       	ldi	r22, 0x00	; 0
 ba8:	70 e0       	ldi	r23, 0x00	; 0
 baa:	cf 01       	movw	r24, r30
 bac:	a3 d1       	rcall	.+838    	; 0xef4 <memset>
 bae:	4f ef       	ldi	r20, 0xFF	; 255
			{
				Endpoint_ClearSETUP();	

				uint16_t ReportSize = 0;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 bb0:	41 0f       	add	r20, r17
 bb2:	8e 01       	movw	r16, r28
				uint8_t  ReportData[HIDInterfaceInfo->Config.PrevReportINBufferSize];

				memset(ReportData, 0, sizeof(ReportData));

				CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, ReportType, ReportData, &ReportSize);
 bb4:	0f 5f       	subi	r16, 0xFF	; 255
 bb6:	1f 4f       	sbci	r17, 0xFF	; 255
 bb8:	96 01       	movw	r18, r12
 bba:	be 01       	movw	r22, r28
 bbc:	6d 5f       	subi	r22, 0xFD	; 253
 bbe:	7f 4f       	sbci	r23, 0xFF	; 255
 bc0:	c7 01       	movw	r24, r14
 bc2:	33 db       	rcall	.-2458   	; 0x22a <CALLBACK_HID_Device_CreateHIDReport>
 bc4:	f7 01       	movw	r30, r14
 bc6:	85 81       	ldd	r24, Z+5	; 0x05
				
				if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 bc8:	96 81       	ldd	r25, Z+6	; 0x06
 bca:	00 97       	sbiw	r24, 0x00	; 0
 bcc:	21 f0       	breq	.+8      	; 0xbd6 <HID_Device_ProcessControlRequest+0xe6>
 bce:	47 81       	ldd	r20, Z+7	; 0x07
 bd0:	50 e0       	ldi	r21, 0x00	; 0
				  memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
 bd2:	b6 01       	movw	r22, r12
 bd4:	86 d1       	rcall	.+780    	; 0xee2 <memcpy>
 bd6:	10 92 e9 00 	sts	0x00E9, r1
 bda:	69 81       	ldd	r22, Y+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 bdc:	7a 81       	ldd	r23, Y+2	; 0x02
 bde:	c6 01       	movw	r24, r12

				Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
				Endpoint_Write_Control_Stream_LE(ReportData, ReportSize);
 be0:	b0 dc       	rcall	.-1696   	; 0x542 <Endpoint_Write_Control_Stream_LE>
 be2:	80 91 e8 00 	lds	r24, 0x00E8
 be6:	8b 77       	andi	r24, 0x7B	; 123
 be8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
 bec:	0f b6       	in	r0, 0x3f	; 63
 bee:	f8 94       	cli
 bf0:	9e be       	out	0x3e, r9	; 62
 bf2:	0f be       	out	0x3f, r0	; 63
 bf4:	8d be       	out	0x3d, r8	; 61
 bf6:	81 c0       	rjmp	.+258    	; 0xcfa <HID_Device_ProcessControlRequest+0x20a>
 bf8:	80 91 9a 01 	lds	r24, 0x019A
 bfc:	81 32       	cpi	r24, 0x21	; 33
 bfe:	09 f0       	breq	.+2      	; 0xc02 <HID_Device_ProcessControlRequest+0x112>
				Endpoint_ClearOUT();
			}
		
			break;
		case REQ_SetReport:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 c00:	7c c0       	rjmp	.+248    	; 0xcfa <HID_Device_ProcessControlRequest+0x20a>
 c02:	80 91 e8 00 	lds	r24, 0x00E8
 c06:	87 7f       	andi	r24, 0xF7	; 247
 c08:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c0c:	00 91 a0 01 	lds	r16, 0x01A0
 c10:	10 91 a1 01 	lds	r17, 0x01A1
			{
				Endpoint_ClearSETUP();
				
				uint16_t ReportSize = USB_ControlRequest.wLength;
 c14:	90 90 9c 01 	lds	r9, 0x019C
 c18:	80 90 9d 01 	lds	r8, 0x019D
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
 c1c:	8d b7       	in	r24, 0x3d	; 61
 c1e:	9e b7       	in	r25, 0x3e	; 62
 c20:	80 1b       	sub	r24, r16
 c22:	91 0b       	sbc	r25, r17
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
				uint8_t  ReportData[ReportSize];
 c24:	0f b6       	in	r0, 0x3f	; 63
 c26:	f8 94       	cli
 c28:	9e bf       	out	0x3e, r25	; 62
 c2a:	0f be       	out	0x3f, r0	; 63
 c2c:	8d bf       	out	0x3d, r24	; 61
 c2e:	ed b7       	in	r30, 0x3d	; 61
 c30:	fe b7       	in	r31, 0x3e	; 62
 c32:	31 96       	adiw	r30, 0x01	; 1
 c34:	6f 01       	movw	r12, r30
 c36:	b8 01       	movw	r22, r16
 c38:	cf 01       	movw	r24, r30
 c3a:	32 dd       	rcall	.-1436   	; 0x6a0 <Endpoint_Read_Control_Stream_LE>
 c3c:	4f ef       	ldi	r20, 0xFF	; 255

				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
 c3e:	48 0d       	add	r20, r8
 c40:	96 01       	movw	r18, r12
 c42:	69 2d       	mov	r22, r9
 c44:	c7 01       	movw	r24, r14
			{
				Endpoint_ClearSETUP();
				
				uint16_t ReportSize = USB_ControlRequest.wLength;
				uint8_t  ReportID   = (USB_ControlRequest.wValue & 0xFF);
				uint8_t  ReportType = (USB_ControlRequest.wValue >> 8) - 1;
 c46:	4a db       	rcall	.-2412   	; 0x2dc <CALLBACK_HID_Device_ProcessHIDReport>
 c48:	80 91 e8 00 	lds	r24, 0x00E8
				uint8_t  ReportData[ReportSize];

				Endpoint_Read_Control_Stream_LE(ReportData, ReportSize);
				CALLBACK_HID_Device_ProcessHIDReport(HIDInterfaceInfo, ReportID, ReportType, ReportData, ReportSize);
 c4c:	8e 77       	andi	r24, 0x7E	; 126
 c4e:	80 93 e8 00 	sts	0x00E8, r24
 c52:	0f b6       	in	r0, 0x3f	; 63
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 c54:	f8 94       	cli
 c56:	be be       	out	0x3e, r11	; 62
 c58:	0f be       	out	0x3f, r0	; 63
 c5a:	ad be       	out	0x3d, r10	; 61
 c5c:	4e c0       	rjmp	.+156    	; 0xcfa <HID_Device_ProcessControlRequest+0x20a>
 c5e:	80 91 9a 01 	lds	r24, 0x019A
 c62:	81 3a       	cpi	r24, 0xA1	; 161
 c64:	09 f0       	breq	.+2      	; 0xc68 <HID_Device_ProcessControlRequest+0x178>
 c66:	49 c0       	rjmp	.+146    	; 0xcfa <HID_Device_ProcessControlRequest+0x20a>
 c68:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearIN();				
			}
			
			break;
		case REQ_GetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 c6c:	87 7f       	andi	r24, 0xF7	; 247
 c6e:	80 93 e8 00 	sts	0x00E8, r24
 c72:	f7 01       	movw	r30, r14
			 *  \note This is not applicable for non CONTROL type endpoints. 
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
 c74:	80 85       	ldd	r24, Z+8	; 0x08
 c76:	39 c0       	rjmp	.+114    	; 0xcea <HID_Device_ProcessControlRequest+0x1fa>
 c78:	80 91 9a 01 	lds	r24, 0x019A
 c7c:	81 32       	cpi	r24, 0x21	; 33
			{
				Endpoint_ClearSETUP();

				Endpoint_Write_Byte(HIDInterfaceInfo->State.UsingReportProtocol);
 c7e:	e9 f5       	brne	.+122    	; 0xcfa <HID_Device_ProcessControlRequest+0x20a>
 c80:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_SetProtocol:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 c84:	87 7f       	andi	r24, 0xF7	; 247
 c86:	80 93 e8 00 	sts	0x00E8, r24
 c8a:	90 91 9c 01 	lds	r25, 0x019C
 c8e:	81 e0       	ldi	r24, 0x01	; 1
 c90:	91 11       	cpse	r25, r1
 c92:	01 c0       	rjmp	.+2      	; 0xc96 <HID_Device_ProcessControlRequest+0x1a6>
 c94:	80 e0       	ldi	r24, 0x00	; 0
			{
				Endpoint_ClearSETUP();

				HIDInterfaceInfo->State.UsingReportProtocol = ((USB_ControlRequest.wValue & 0xFF) != 0x00);
 c96:	f7 01       	movw	r30, r14
 c98:	80 87       	std	Z+8, r24	; 0x08
 c9a:	2e c0       	rjmp	.+92     	; 0xcf8 <HID_Device_ProcessControlRequest+0x208>
 c9c:	80 91 9a 01 	lds	r24, 0x019A
 ca0:	81 32       	cpi	r24, 0x21	; 33
 ca2:	59 f5       	brne	.+86     	; 0xcfa <HID_Device_ProcessControlRequest+0x20a>
 ca4:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_SetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
 ca8:	87 7f       	andi	r24, 0xF7	; 247
 caa:	80 93 e8 00 	sts	0x00E8, r24
 cae:	80 91 9c 01 	lds	r24, 0x019C
 cb2:	90 91 9d 01 	lds	r25, 0x019D
 cb6:	88 27       	eor	r24, r24
 cb8:	36 e0       	ldi	r19, 0x06	; 6
			{
				Endpoint_ClearSETUP();
					
				HIDInterfaceInfo->State.IdleCount = ((USB_ControlRequest.wValue & 0xFF00) >> 6);
 cba:	96 95       	lsr	r25
 cbc:	87 95       	ror	r24
 cbe:	3a 95       	dec	r19
 cc0:	e1 f7       	brne	.-8      	; 0xcba <HID_Device_ProcessControlRequest+0x1ca>
 cc2:	f7 01       	movw	r30, r14
 cc4:	92 87       	std	Z+10, r25	; 0x0a
 cc6:	81 87       	std	Z+9, r24	; 0x09
 cc8:	17 c0       	rjmp	.+46     	; 0xcf8 <HID_Device_ProcessControlRequest+0x208>
 cca:	80 91 9a 01 	lds	r24, 0x019A
 cce:	81 3a       	cpi	r24, 0xA1	; 161
 cd0:	a1 f4       	brne	.+40     	; 0xcfa <HID_Device_ProcessControlRequest+0x20a>
 cd2:	80 91 e8 00 	lds	r24, 0x00E8
				Endpoint_ClearStatusStage();
			}
			
			break;
		case REQ_GetIdle:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
 cd6:	87 7f       	andi	r24, 0xF7	; 247
 cd8:	80 93 e8 00 	sts	0x00E8, r24
 cdc:	f7 01       	movw	r30, r14
 cde:	81 85       	ldd	r24, Z+9	; 0x09
 ce0:	92 85       	ldd	r25, Z+10	; 0x0a
 ce2:	96 95       	lsr	r25
 ce4:	87 95       	ror	r24
 ce6:	96 95       	lsr	r25
			{		
				Endpoint_ClearSETUP();
				
				Endpoint_Write_Byte(HIDInterfaceInfo->State.IdleCount >> 2);
 ce8:	87 95       	ror	r24
 cea:	80 93 f1 00 	sts	0x00F1, r24
 cee:	80 91 e8 00 	lds	r24, 0x00E8
 cf2:	8e 77       	andi	r24, 0x7E	; 126
 cf4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 cf8:	a8 db       	rcall	.-2224   	; 0x44a <Endpoint_ClearStatusStage>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 cfa:	0f b6       	in	r0, 0x3f	; 63
 cfc:	f8 94       	cli
 cfe:	be be       	out	0x3e, r11	; 62
 d00:	0f be       	out	0x3f, r0	; 63
 d02:	ad be       	out	0x3d, r10	; 61
				Endpoint_ClearIN();

				Endpoint_ClearStatusStage();
 d04:	0f 90       	pop	r0
 d06:	0f 90       	pop	r0
			}

			break;
	}
}
 d08:	0f 90       	pop	r0
 d0a:	df 91       	pop	r29
 d0c:	cf 91       	pop	r28
 d0e:	1f 91       	pop	r17
 d10:	0f 91       	pop	r16
 d12:	ff 90       	pop	r15
 d14:	ef 90       	pop	r14
 d16:	df 90       	pop	r13
 d18:	cf 90       	pop	r12
 d1a:	bf 90       	pop	r11
 d1c:	af 90       	pop	r10
 d1e:	9f 90       	pop	r9
 d20:	8f 90       	pop	r8
 d22:	08 95       	ret

00000d24 <HID_Device_ConfigureEndpoints>:
 d24:	cf 93       	push	r28
 d26:	df 93       	push	r29
 d28:	fc 01       	movw	r30, r24
 d2a:	dc 01       	movw	r26, r24
 d2c:	18 96       	adiw	r26, 0x08	; 8
 d2e:	85 e0       	ldi	r24, 0x05	; 5
 d30:	ed 01       	movw	r28, r26

bool HID_Device_ConfigureEndpoints(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	memset(&HIDInterfaceInfo->State, 0x00, sizeof(HIDInterfaceInfo->State));
 d32:	19 92       	st	Y+, r1
 d34:	8a 95       	dec	r24
 d36:	e9 f7       	brne	.-6      	; 0xd32 <HID_Device_ConfigureEndpoints+0xe>
	HIDInterfaceInfo->State.UsingReportProtocol = true;
 d38:	81 e0       	ldi	r24, 0x01	; 1
 d3a:	80 87       	std	Z+8, r24	; 0x08
	HIDInterfaceInfo->State.IdleCount = 500;
 d3c:	84 ef       	ldi	r24, 0xF4	; 244
 d3e:	91 e0       	ldi	r25, 0x01	; 1
 d40:	92 87       	std	Z+10, r25	; 0x0a
 d42:	81 87       	std	Z+9, r24	; 0x09

	if (!(Endpoint_ConfigureEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber, EP_TYPE_INTERRUPT,
 d44:	22 81       	ldd	r18, Z+2	; 0x02
 d46:	33 81       	ldd	r19, Z+3	; 0x03
 d48:	84 81       	ldd	r24, Z+4	; 0x04
 d4a:	88 23       	and	r24, r24
 d4c:	11 f0       	breq	.+4      	; 0xd52 <HID_Device_ConfigureEndpoints+0x2e>
 d4e:	c4 e0       	ldi	r28, 0x04	; 4
 d50:	01 c0       	rjmp	.+2      	; 0xd54 <HID_Device_ConfigureEndpoints+0x30>
 d52:	c0 e0       	ldi	r28, 0x00	; 0
 d54:	d1 81       	ldd	r29, Z+1	; 0x01
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
				                                      ((1 << ALLOC) | Banks | Endpoint_BytesToEPSizeMaskDynamic(Size)));
 d56:	c9 01       	movw	r24, r18
 d58:	43 db       	rcall	.-2426   	; 0x3e0 <Endpoint_BytesToEPSizeMaskDynamic>
 d5a:	4c 2f       	mov	r20, r28
			                                                     const uint8_t Type,
			                                                     const uint8_t Direction,
			                                                     const uint16_t Size,
			                                                     const uint8_t Banks)
			{
				return Endpoint_ConfigureEndpoint_Prv(Number, (((Type) << EPTYPE0) | (Direction)),
 d5c:	48 2b       	or	r20, r24
 d5e:	42 60       	ori	r20, 0x02	; 2
 d60:	61 ec       	ldi	r22, 0xC1	; 193
 d62:	8d 2f       	mov	r24, r29
 d64:	df 91       	pop	r29
	{
		return false;
	}
	
	return true;
}
 d66:	cf 91       	pop	r28
 d68:	49 cb       	rjmp	.-2414   	; 0x3fc <Endpoint_ConfigureEndpoint_Prv>

00000d6a <HID_Device_USBTask>:
 d6a:	5f 92       	push	r5
 d6c:	6f 92       	push	r6
		
void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
 d6e:	7f 92       	push	r7
 d70:	8f 92       	push	r8
 d72:	9f 92       	push	r9
 d74:	af 92       	push	r10
 d76:	bf 92       	push	r11
 d78:	cf 92       	push	r12
 d7a:	df 92       	push	r13
 d7c:	ef 92       	push	r14
 d7e:	ff 92       	push	r15
 d80:	0f 93       	push	r16
 d82:	1f 93       	push	r17
 d84:	cf 93       	push	r28
 d86:	df 93       	push	r29
 d88:	00 d0       	rcall	.+0      	; 0xd8a <HID_Device_USBTask+0x20>
 d8a:	1f 92       	push	r1
 d8c:	cd b7       	in	r28, 0x3d	; 61
 d8e:	de b7       	in	r29, 0x3e	; 62
 d90:	7c 01       	movw	r14, r24
			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);
			
			Endpoint_ClearIN();
		}
	}
}
 d92:	ad b6       	in	r10, 0x3d	; 61
 d94:	be b6       	in	r11, 0x3e	; 62
	return true;
}
		
void HID_Device_USBTask(USB_ClassInfo_HID_Device_t* const HIDInterfaceInfo)
{
	if (USB_DeviceState != DEVICE_STATE_Configured)
 d96:	8e b3       	in	r24, 0x1e	; 30
 d98:	84 30       	cpi	r24, 0x04	; 4
 d9a:	09 f0       	breq	.+2      	; 0xd9e <HID_Device_USBTask+0x34>
 d9c:	77 c0       	rjmp	.+238    	; 0xe8c <HID_Device_USBTask+0x122>
	  return;

	Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 d9e:	f7 01       	movw	r30, r14
 da0:	81 81       	ldd	r24, Z+1	; 0x01
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 da2:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean true if the currently selected endpoint may be read from or written to, depending on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
 da6:	80 91 e8 00 	lds	r24, 0x00E8
	
	if (Endpoint_IsReadWriteAllowed())
 daa:	85 ff       	sbrs	r24, 5
 dac:	6f c0       	rjmp	.+222    	; 0xe8c <HID_Device_USBTask+0x122>
 dae:	8d b6       	in	r8, 0x3d	; 61
 db0:	9e b6       	in	r9, 0x3e	; 62
	{
		uint8_t  ReportINData[HIDInterfaceInfo->Config.PrevReportINBufferSize];
 db2:	47 81       	ldd	r20, Z+7	; 0x07
 db4:	50 e0       	ldi	r21, 0x00	; 0
 db6:	8d b7       	in	r24, 0x3d	; 61
 db8:	9e b7       	in	r25, 0x3e	; 62
 dba:	84 1b       	sub	r24, r20
 dbc:	95 0b       	sbc	r25, r21
 dbe:	0f b6       	in	r0, 0x3f	; 63
 dc0:	f8 94       	cli
 dc2:	9e bf       	out	0x3e, r25	; 62
 dc4:	0f be       	out	0x3f, r0	; 63
 dc6:	8d bf       	out	0x3d, r24	; 61
 dc8:	ed b7       	in	r30, 0x3d	; 61
 dca:	fe b7       	in	r31, 0x3e	; 62
 dcc:	31 96       	adiw	r30, 0x01	; 1
 dce:	6f 01       	movw	r12, r30
		uint8_t  ReportID     = 0;
 dd0:	1b 82       	std	Y+3, r1	; 0x03
		uint16_t ReportINSize = 0;
 dd2:	1a 82       	std	Y+2, r1	; 0x02
 dd4:	19 82       	std	Y+1, r1	; 0x01

		memset(ReportINData, 0, sizeof(ReportINData));
 dd6:	60 e0       	ldi	r22, 0x00	; 0
 dd8:	70 e0       	ldi	r23, 0x00	; 0
 dda:	cf 01       	movw	r24, r30
 ddc:	8b d0       	rcall	.+278    	; 0xef4 <memset>
 dde:	8e 01       	movw	r16, r28

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, REPORT_ITEM_TYPE_In,
 de0:	0f 5f       	subi	r16, 0xFF	; 255
 de2:	1f 4f       	sbci	r17, 0xFF	; 255
 de4:	96 01       	movw	r18, r12
 de6:	40 e0       	ldi	r20, 0x00	; 0
 de8:	be 01       	movw	r22, r28
 dea:	6d 5f       	subi	r22, 0xFD	; 253
 dec:	7f 4f       	sbci	r23, 0xFF	; 255
 dee:	c7 01       	movw	r24, r14
 df0:	1c da       	rcall	.-3016   	; 0x22a <CALLBACK_HID_Device_CreateHIDReport>
 df2:	68 2e       	mov	r6, r24
 df4:	f7 01       	movw	r30, r14
 df6:	81 85       	ldd	r24, Z+9	; 0x09
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
		bool IdlePeriodElapsed = (HIDInterfaceInfo->State.IdleCount && !(HIDInterfaceInfo->State.IdleMSRemaining));
 df8:	92 85       	ldd	r25, Z+10	; 0x0a
 dfa:	89 2b       	or	r24, r25
 dfc:	41 f0       	breq	.+16     	; 0xe0e <HID_Device_USBTask+0xa4>
 dfe:	21 e0       	ldi	r18, 0x01	; 1
 e00:	83 85       	ldd	r24, Z+11	; 0x0b
 e02:	94 85       	ldd	r25, Z+12	; 0x0c
 e04:	89 2b       	or	r24, r25
 e06:	09 f0       	breq	.+2      	; 0xe0a <HID_Device_USBTask+0xa0>
 e08:	20 e0       	ldi	r18, 0x00	; 0
 e0a:	72 2e       	mov	r7, r18
 e0c:	01 c0       	rjmp	.+2      	; 0xe10 <HID_Device_USBTask+0xa6>
 e0e:	71 2c       	mov	r7, r1
 e10:	f7 01       	movw	r30, r14
 e12:	05 81       	ldd	r16, Z+5	; 0x05
		
		if (HIDInterfaceInfo->Config.PrevReportINBuffer != NULL)
 e14:	16 81       	ldd	r17, Z+6	; 0x06
 e16:	01 15       	cp	r16, r1
 e18:	11 05       	cpc	r17, r1
 e1a:	89 f0       	breq	.+34     	; 0xe3e <HID_Device_USBTask+0xd4>
 e1c:	49 81       	ldd	r20, Y+1	; 0x01
 e1e:	5a 81       	ldd	r21, Y+2	; 0x02
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
 e20:	b8 01       	movw	r22, r16
 e22:	c6 01       	movw	r24, r12
 e24:	51 d0       	rcall	.+162    	; 0xec8 <memcmp>
 e26:	55 24       	eor	r5, r5
 e28:	53 94       	inc	r5
 e2a:	89 2b       	or	r24, r25
 e2c:	09 f4       	brne	.+2      	; 0xe30 <HID_Device_USBTask+0xc6>
 e2e:	51 2c       	mov	r5, r1
 e30:	f7 01       	movw	r30, r14
 e32:	47 81       	ldd	r20, Z+7	; 0x07
 e34:	50 e0       	ldi	r21, 0x00	; 0
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
 e36:	b6 01       	movw	r22, r12
 e38:	c8 01       	movw	r24, r16
 e3a:	53 d0       	rcall	.+166    	; 0xee2 <memcpy>
 e3c:	01 c0       	rjmp	.+2      	; 0xe40 <HID_Device_USBTask+0xd6>
 e3e:	51 2c       	mov	r5, r1
 e40:	29 81       	ldd	r18, Y+1	; 0x01
 e42:	3a 81       	ldd	r19, Y+2	; 0x02
 e44:	23 2b       	or	r18, r19

		memset(ReportINData, 0, sizeof(ReportINData));

		bool ForceSend         = CALLBACK_HID_Device_CreateHIDReport(HIDInterfaceInfo, &ReportID, REPORT_ITEM_TYPE_In,
		                                                             ReportINData, &ReportINSize);
		bool StatesChanged     = false;
 e46:	e9 f0       	breq	.+58     	; 0xe82 <HID_Device_USBTask+0x118>
		{
			StatesChanged = (memcmp(ReportINData, HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINSize) != 0);
			memcpy(HIDInterfaceInfo->Config.PrevReportINBuffer, ReportINData, HIDInterfaceInfo->Config.PrevReportINBufferSize);
		}

		if (ReportINSize && (ForceSend || StatesChanged || IdlePeriodElapsed))
 e48:	61 10       	cpse	r6, r1
 e4a:	04 c0       	rjmp	.+8      	; 0xe54 <HID_Device_USBTask+0xea>
 e4c:	51 10       	cpse	r5, r1
 e4e:	02 c0       	rjmp	.+4      	; 0xe54 <HID_Device_USBTask+0xea>
 e50:	70 fe       	sbrs	r7, 0
 e52:	17 c0       	rjmp	.+46     	; 0xe82 <HID_Device_USBTask+0x118>
 e54:	f7 01       	movw	r30, r14
 e56:	81 85       	ldd	r24, Z+9	; 0x09
 e58:	92 85       	ldd	r25, Z+10	; 0x0a
 e5a:	94 87       	std	Z+12, r25	; 0x0c
		{
			HIDInterfaceInfo->State.IdleMSRemaining = HIDInterfaceInfo->State.IdleCount;
 e5c:	83 87       	std	Z+11, r24	; 0x0b
 e5e:	81 81       	ldd	r24, Z+1	; 0x01
 e60:	80 93 e9 00 	sts	0x00E9, r24
 e64:	8b 81       	ldd	r24, Y+3	; 0x03

			Endpoint_SelectEndpoint(HIDInterfaceInfo->Config.ReportINEndpointNumber);
 e66:	81 11       	cpse	r24, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t EndpointNumber)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = EndpointNumber;
 e68:	80 93 f1 00 	sts	0x00F1, r24

			if (ReportID)
 e6c:	69 81       	ldd	r22, Y+1	; 0x01
 e6e:	7a 81       	ldd	r23, Y+2	; 0x02
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
 e70:	40 e0       	ldi	r20, 0x00	; 0
 e72:	50 e0       	ldi	r21, 0x00	; 0
			  Endpoint_Write_Byte(ReportID);

			Endpoint_Write_Stream_LE(ReportINData, ReportINSize, NO_STREAM_CALLBACK);
 e74:	c6 01       	movw	r24, r12
 e76:	35 db       	rcall	.-2454   	; 0x4e2 <Endpoint_Write_Stream_LE>
 e78:	80 91 e8 00 	lds	r24, 0x00E8
 e7c:	8e 77       	andi	r24, 0x7E	; 126
 e7e:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
 e82:	0f b6       	in	r0, 0x3f	; 63
 e84:	f8 94       	cli
 e86:	9e be       	out	0x3e, r9	; 62
 e88:	0f be       	out	0x3f, r0	; 63
 e8a:	8d be       	out	0x3d, r8	; 61
 e8c:	0f b6       	in	r0, 0x3f	; 63
 e8e:	f8 94       	cli
 e90:	be be       	out	0x3e, r11	; 62
 e92:	0f be       	out	0x3f, r0	; 63
 e94:	ad be       	out	0x3d, r10	; 61
			
			Endpoint_ClearIN();
		}
	}
}
 e96:	0f 90       	pop	r0
 e98:	0f 90       	pop	r0
 e9a:	0f 90       	pop	r0
 e9c:	df 91       	pop	r29
 e9e:	cf 91       	pop	r28
 ea0:	1f 91       	pop	r17
 ea2:	0f 91       	pop	r16
 ea4:	ff 90       	pop	r15
 ea6:	ef 90       	pop	r14
 ea8:	df 90       	pop	r13
 eaa:	cf 90       	pop	r12
 eac:	bf 90       	pop	r11
 eae:	af 90       	pop	r10
 eb0:	9f 90       	pop	r9
 eb2:	8f 90       	pop	r8
 eb4:	7f 90       	pop	r7
 eb6:	6f 90       	pop	r6
 eb8:	5f 90       	pop	r5
 eba:	08 95       	ret

00000ebc <__tablejump2__>:
 ebc:	ee 0f       	add	r30, r30
 ebe:	ff 1f       	adc	r31, r31

00000ec0 <__tablejump__>:
 ec0:	05 90       	lpm	r0, Z+
 ec2:	f4 91       	lpm	r31, Z
 ec4:	e0 2d       	mov	r30, r0
 ec6:	09 94       	ijmp

00000ec8 <memcmp>:
 ec8:	fb 01       	movw	r30, r22
 eca:	dc 01       	movw	r26, r24
 ecc:	04 c0       	rjmp	.+8      	; 0xed6 <memcmp+0xe>
 ece:	8d 91       	ld	r24, X+
 ed0:	01 90       	ld	r0, Z+
 ed2:	80 19       	sub	r24, r0
 ed4:	21 f4       	brne	.+8      	; 0xede <memcmp+0x16>
 ed6:	41 50       	subi	r20, 0x01	; 1
 ed8:	50 40       	sbci	r21, 0x00	; 0
 eda:	c8 f7       	brcc	.-14     	; 0xece <memcmp+0x6>
 edc:	88 1b       	sub	r24, r24
 ede:	99 0b       	sbc	r25, r25
 ee0:	08 95       	ret

00000ee2 <memcpy>:
 ee2:	fb 01       	movw	r30, r22
 ee4:	dc 01       	movw	r26, r24
 ee6:	02 c0       	rjmp	.+4      	; 0xeec <memcpy+0xa>
 ee8:	01 90       	ld	r0, Z+
 eea:	0d 92       	st	X+, r0
 eec:	41 50       	subi	r20, 0x01	; 1
 eee:	50 40       	sbci	r21, 0x00	; 0
 ef0:	d8 f7       	brcc	.-10     	; 0xee8 <memcpy+0x6>
 ef2:	08 95       	ret

00000ef4 <memset>:
 ef4:	dc 01       	movw	r26, r24
 ef6:	01 c0       	rjmp	.+2      	; 0xefa <memset+0x6>
 ef8:	6d 93       	st	X+, r22
 efa:	41 50       	subi	r20, 0x01	; 1
 efc:	50 40       	sbci	r21, 0x00	; 0
 efe:	e0 f7       	brcc	.-8      	; 0xef8 <memset+0x4>
 f00:	08 95       	ret

00000f02 <_exit>:
 f02:	f8 94       	cli

00000f04 <__stop_program>:
 f04:	ff cf       	rjmp	.-2      	; 0xf04 <__stop_program>
